// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.28;

import "forge-std/Test.sol";
import "src/YieldExposedToken.sol";

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {CustomToken} from "src/CustomToken.sol";
import {NativeConverter} from "src/NativeConverter.sol";
import {TransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import {ZkEVMCommon} from "test/etc/ZkEVMCommon.sol";

import {IBridgeL2SovereignChain} from "test/interfaces/IBridgeL2SovereignChain.sol";
import {IMetaMorpho} from "test/interfaces/IMetaMorpho.sol";
import {IMetaMorphoV1_1Factory} from "test/interfaces/IMetaMorphoV1_1Factory.sol";
import {ILxLyBridge as _ILxLyBridge} from "test/interfaces/ILxLyBridge.sol";
import {IPolygonZkEVMGlobalExitRoot} from "test/interfaces/IPolygonZkEVMGlobalExitRoot.sol";

// MOCKS
contract MockYeToken is YieldExposedToken {
    constructor() {
        _disableInitializers();
    }

    function initialize(
        address owner_,
        string calldata name_,
        string calldata symbol_,
        address underlyingToken_,
        uint256 minimumReservePercentage_,
        address yieldVault_,
        address yieldRecipient_,
        address lxlyBridge_,
        NativeConverter[] calldata nativeConverters_
    ) external initializer {
        __YieldExposedToken_init(
            owner_,
            name_,
            symbol_,
            underlyingToken_,
            minimumReservePercentage_,
            yieldVault_,
            yieldRecipient_,
            lxlyBridge_,
            nativeConverters_,
            10,
            address(0)
        );
    }

    function version() external pure virtual returns (string memory) {
        return "1.0.0";
    }

    function _assetsAfterTransferFee(uint256 assetsBeforeTransferFee)
        internal
        view
        virtual
        override
        returns (uint256)
    {
        return assetsBeforeTransferFee;
    }

    function _assetsBeforeTransferFee(uint256 minimumAssetsAfterTransferFee)
        internal
        view
        virtual
        override
        returns (uint256)
    {
        return minimumAssetsAfterTransferFee;
    }
}

contract MockNativeConverter is NativeConverter {
    constructor() {
        _disableInitializers();
    }

    function initialize(
        address owner_,
        uint8 originalUnderlyingTokenDecimals_,
        address customToken_,
        address underlyingToken_,
        address lxlyBridge_,
        uint32 layerXLxlyId_,
        address yeToken_,
        address migrator_
    ) external initializer {
        // Initialize the base implementation.
        __NativeConverter_init(
            owner_,
            originalUnderlyingTokenDecimals_,
            customToken_,
            underlyingToken_,
            lxlyBridge_,
            layerXLxlyId_,
            yeToken_,
            migrator_
        );
    }

    function version() external pure virtual returns (string memory) {
        return "1.0.0";
    }
}

contract MockCustomToken is CustomToken {
    constructor() {
        _disableInitializers();
    }

    function initialize(
        address owner_,
        string calldata name_,
        string calldata symbol_,
        uint8 originalUnderlyingTokenDecimals_,
        address lxlyBridge_,
        address nativeConverter_
    ) external initializer {
        // Initialize the base implementation.
        __CustomToken_init(owner_, name_, symbol_, originalUnderlyingTokenDecimals_, lxlyBridge_, nativeConverter_);
    }

    function version() external pure virtual returns (string memory) {
        return "1.0.0";
    }
}

contract UnderlyingAsset is ERC20 {
    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}
}

contract TokenWrapped is ERC20 {
    // Domain typehash
    bytes32 public constant DOMAIN_TYPEHASH =
        keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
    // Permit typehash
    bytes32 public constant PERMIT_TYPEHASH =
        keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

    // Version
    string public constant VERSION = "1";

    // Chain id on deployment
    uint256 public immutable deploymentChainId;

    // Domain separator calculated on deployment
    bytes32 private immutable _DEPLOYMENT_DOMAIN_SEPARATOR;

    // PolygonZkEVM Bridge address
    address public immutable bridgeAddress;

    // Decimals
    uint8 private immutable _decimals;

    // Permit nonces
    mapping(address => uint256) public nonces;

    modifier onlyBridge() {
        require(msg.sender == bridgeAddress, "TokenWrapped::onlyBridge: Not PolygonZkEVMBridge");
        _;
    }

    constructor(string memory name, string memory symbol, uint8 __decimals) ERC20(name, symbol) {
        bridgeAddress = msg.sender;
        _decimals = __decimals;
        deploymentChainId = block.chainid;
        _DEPLOYMENT_DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);
    }

    function mint(address to, uint256 value) external onlyBridge {
        _mint(to, value);
    }

    // Notice that is not require to approve wrapped tokens to use the bridge
    function burn(address account, uint256 value) external onlyBridge {
        _burn(account, value);
    }

    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    // Permit relative functions
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
        external
    {
        require(block.timestamp <= deadline, "TokenWrapped::permit: Expired permit");

        bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));

        bytes32 digest = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR(), hashStruct));

        address signer = ecrecover(digest, v, r, s);
        require(signer != address(0) && signer == owner, "TokenWrapped::permit: Invalid signature");

        _approve(owner, spender, value);
    }

    /**
     * @notice Calculate domain separator, given a chainID.
     * @param chainId Current chainID
     */
    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {
        return keccak256(
            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), keccak256(bytes(VERSION)), chainId, address(this))
        );
    }

    /// @dev Return the DOMAIN_SEPARATOR.
    function DOMAIN_SEPARATOR() public view returns (bytes32) {
        return
            block.chainid == deploymentChainId ? _DEPLOYMENT_DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);
    }
}

contract IntegrationTest is Test, ZkEVMCommon {
    struct ClaimPayload {
        bytes32[32] proofLayerX;
        bytes32[32] proofLayerY;
        uint256 globalIndex;
        bytes32 exitRootLayerX;
        bytes32 exitRootLayerY;
        uint32 originNetwork;
        address originAddress;
        uint32 destinationNetwork;
        address destinationAddress;
        uint256 amount;
        bytes metadata;
    }

    struct LeafPayload {
        uint8 leafType;
        uint32 originNetwork;
        address originAddress;
        uint32 destinationNetwork;
        address destinationAddress;
        uint256 amount;
        bytes metadata;
    }

    // constants
    bytes constant METAMORPHO_FACTORY_BYTECODE =
        hex"6080806040526004361015610012575f80fd5b5f3560e01c90816329b5352c14610241575080633acb5624146101fd5763b51020251461003d575f80fd5b346101f95760c03660031901126101f957610056610279565b6024356044356001600160a01b038116908190036101f95760643567ffffffffffffffff81116101f95761008e90369060040161028f565b9160843567ffffffffffffffff81116101f9576100af90369060040161028f565b9060a43591604051615c51908181019781891067ffffffffffffffff8a11176101e5576101478291879461031c843960018060a01b0316998a815260018060a01b037f000000000000000000000000bbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb16602082015286604082015288606082015260c0608082015261013860c082018b6102f7565b9060a0818303910152856102f7565b03905ff59586156101da576101c67fed8c95d05909b0f217f3e68171ef917df4b278d5addfe4dda888e90279be7d1d926101b860209960018060a01b0316988996875f525f8c5260405f20600160ff198254161790556040519586528b86015260a0604086015260a08501906102f7565b9083820360608501526102f7565b9360808201528033940390a4604051908152f35b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b346101f9575f3660031901126101f9576040517f000000000000000000000000bbbbbbbbbb9cc5e90e3b3af64bdaf62c37eeffcb6001600160a01b03168152602090f35b346101f95760203660031901126101f9576020906001600160a01b03610265610279565b165f525f825260ff60405f20541615158152f35b600435906001600160a01b03821682036101f957565b81601f820112156101f95780359067ffffffffffffffff82116101e55760405192601f8301601f19908116603f0116840167ffffffffffffffff8111858210176101e557604052828452602083830101116101f957815f926020809301838601378301015290565b805180835260209291819084018484015e5f828201840152601f01601f191601019056fe6101e0806040523461065157615c51803803809161001d8285610a31565b8339810160c0828203126106515761003482610a54565b9061004160208401610a54565b9160408401519161005460608601610a54565b60808601519095906001600160401b0381116106515782610076918301610a83565b60a08201519092906001600160401b038111610651576100969201610a83565b90602094604051966100a88789610a31565b5f885260018060a01b0316936040516100c18882610a31565b5f8152604051986100d2898b610a31565b5f8a526040998a51926100e58c85610a31565b60018452603160f81b8b8501528051906001600160401b03821161075a5760035490600182811c92168015610a27575b8d83101461073c578c82601f8594116109d5575b50508c90601f831160011461096e575f92610963575b50508160011b915f199060031b1c1916176003555b8051906001600160401b03821161075a5760045490600182811c92168015610959575b8c83101461073c5781601f84931161090a575b508b90601f83116001146108a3575f92610898575b50508160011b915f199060031b1c1916176004555b6101bd87610dc2565b9015610890575b60a052866080526101d481610af3565b610160526101e182610c5b565b6101805288815191012090816101205288815191012080610140524660e052895190898201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f84528b83015260608201524660808201523060a082015260a0815261024e60c082610a31565b51902060c05230610100526001600160a01b031690811561087d57600980546001600160a01b03199081169091556008805491821684179055885192906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a36001600160a01b031694851561086e578061083b575b80600e5581527fd28e9b90ee9b37c5936ff84392d71f29ff18117d7e76bcee60615262a90a3f75863392a25f60115580516001600160401b03811161075a57601854600181811c91168015610831575b8782101461073c57601f81116107ed575b5085601f8211600114610779579181610377925f80516020615c31833981519152945f9161076e575b508160011b915f199060031b1c1916176018555b875191829182610ac9565b0390a180516001600160401b03811161075a57601954600181811c91168015610750575b8682101461073c57601f81116106f8575b5084601f8211600114610671579181610407927fadf3ae8bd543b3007d464f15cb8ea1db3f44e84d41d203164f40b95e27558ac6945f91610666575b508160011b915f199060031b1c1916176019555b865191829182610ac9565b0390a16101a0829052835163313ce56760e01b81528381600481855afa90811561065c575f91610620575b5060ff809116806012039060121102166101c0528351915f8085850163095ea7b360e01b81528360248701528119604487015260448652610474606487610a31565b85519082865af1610483610d93565b816105f0575b50806105e6575b156105a1575b8451614d129081610f1f82396080518181816122bc01528181612552015281816139200152613d3b015260a05181612618015260c05181613298015260e0518161335501526101005181613262015261012051816132e70152610140518161330d015261016051816113230152610180518161134c01526101a0518181816118280152818161195e015281816121240152818161233d0152818161250e01528181612fb6015281816135530152818161362401528181613a6e01528181613e1e01528181613f11015281816145bb015281816149740152614c1701526101c051818181610e60015281816125f4015281816138330152818161387901528181613b9b0152613bde0152f35b6105dd936105d89186519163095ea7b360e01b9083015260248201525f6044820152604481526105d2606482610a31565b82610e55565b610e55565b5f808080610496565b50813b1515610490565b80518015925086908315610608575b5050505f610489565b6106189350820181019101610e3d565b5f85816105ff565b90508381813d8311610655575b6106378183610a31565b81010312610651575160ff811681036106515760ff610432565b5f80fd5b503d61062d565b85513d5f823e3d90fd5b90508201515f6103e8565b601f1982169060195f52865f20915f5b888282106106e2575050927fadf3ae8bd543b3007d464f15cb8ea1db3f44e84d41d203164f40b95e27558ac694926001928261040796106106ca575b5050811b016019556103fc565b8401515f1960f88460031b161c191690555f806106bd565b6001849582939589015181550194019201610681565b60195f52855f20601f830160051c810191878410610732575b601f0160051c01905b81811061072757506103ac565b5f815560010161071a565b9091508190610711565b634e487b7160e01b5f52602260045260245ffd5b90607f169061039b565b634e487b7160e01b5f52604160045260245ffd5b90508201515f610358565b601f1982169060185f52875f20915f5b898282106107d7575050925f80516020615c3183398151915294926001928261037796106107bf575b5050811b0160185561036c565b8401515f1960f88460031b161c191690555f806107b2565b6001849582939589015181550194019201610789565b60185f52865f20601f830160051c810191888410610827575b601f0160051c01905b81811061081c575061032f565b5f815560010161080f565b9091508190610806565b90607f169061031e565b62127500811161085f57620151808110156102ce57631a1593df60e11b5f5260045ffd5b6346fedb5760e01b5f5260045ffd5b63d92e233d60e01b5f5260045ffd5b631e4fbdf760e01b5f525f60045260245ffd5b5060126101c4565b015190505f8061019f565b60045f9081528d81209350601f198516908e5b8282106108f35750509084600195949392106108db575b505050811b016004556101b4565b01515f1960f88460031b161c191690555f80806108cd565b60018596829396860151815501950193018e6108b6565b90915060045f528b5f20601f840160051c8101918d851061094f575b90601f859493920160051c01905b818110610941575061018a565b5f8155849350600101610934565b9091508190610926565b91607f1691610177565b015190505f8061013f565b60035f9081528e81209350601f198516908f5b8282106109be5750509084600195949392106109a6575b505050811b01600355610154565b01515f1960f88460031b161c191690555f8080610998565b60018596829396860151815501950193018f610981565b9091925060035f52815f2090601f850160051c8201928510610a1d575b90601f859493920160051c01905b818110610a0f578e9150610129565b5f8155849350600101610a00565b90915081906109f2565b91607f1691610115565b601f909101601f19168101906001600160401b0382119082101761075a57604052565b51906001600160a01b038216820361065157565b6001600160401b03811161075a57601f01601f191660200190565b81601f8201121561065157805190610a9a82610a68565b92610aa86040519485610a31565b8284526020838301011161065157815f9260208093018386015e8301015290565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b908151602081105f14610b4e575090601f815111610b2d576020815191015160208210610b1e571790565b5f198260200360031b1b161790565b60405163305a27a960e01b8152908190610b4a9060048301610ac9565b0390fd5b6001600160401b03811161075a57600554600181811c91168015610c51575b602082101461073c57601f8111610c1e575b50602092601f8211600114610bbd57928192935f92610bb2575b50508160011b915f199060031b1c19161760055560ff90565b015190505f80610b99565b601f1982169360055f52805f20915f5b868110610c065750836001959610610bee575b505050811b0160055560ff90565b01515f1960f88460031b161c191690555f8080610be0565b91926020600181928685015181550194019201610bcd565b60055f52601f60205f20910160051c810190601f830160051c015b818110610c465750610b7f565b5f8155600101610c39565b90607f1690610b6d565b908151602081105f14610c86575090601f815111610b2d576020815191015160208210610b1e571790565b6001600160401b03811161075a57600654600181811c91168015610d89575b602082101461073c57601f8111610d56575b50602092601f8211600114610cf557928192935f92610cea575b50508160011b915f199060031b1c19161760065560ff90565b015190505f80610cd1565b601f1982169360065f52805f20915f5b868110610d3e5750836001959610610d26575b505050811b0160065560ff90565b01515f1960f88460031b161c191690555f8080610d18565b91926020600181928685015181550194019201610d05565b60065f52601f60205f20910160051c810190601f830160051c015b818110610d7e5750610cb7565b5f8155600101610d71565b90607f1690610ca5565b3d15610dbd573d90610da482610a68565b91610db26040519384610a31565b82523d5f602084013e565b606090565b5f8091604051602081019063313ce56760e01b825260048152610de6602482610a31565b51916001600160a01b03165afa610dfb610d93565b9080610e31575b610e0e575b505f905f90565b602081805181010312610651576020015160ff8111610e07579060ff6001921690565b50602081511015610e02565b90816020910312610651575180151581036106515790565b5f80610e7d9260018060a01b03169360208151910182865af1610e76610d93565b9083610ec0565b8051908115159182610ea5575b5050610e935750565b635274afe760e01b5f5260045260245ffd5b610eb89250602080918301019101610e3d565b155f80610e8a565b90610ee45750805115610ed557805190602001fd5b630a12f52160e11b5f5260045ffd5b81511580610f15575b610ef5575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b15610eed56fe60806040526004361015610011575f80fd5b5f3560e01c806301e1d11414612aff57806306fdde0314612a6d57806307a2d13a14611ded578063095ea7b314612a475780630a28a47714612a1e578063102f7b6c1461298d57806318160ddd146129705780631ecca77c1461290757806321cb4b14146128ea57806323b872dd146128b25780632acc56f9146126bc5780632b30997b1461264f578063313ce567146125e057806333f91ebb146125c35780633644e515146125a9578063388af5b51461258157806338d52e0f1461253d5780633acb5624146124f95780633b24c2bf14612270578063402d267d1461224c57806341b6783314611ee7578063452a932014611ebf5780634690484014611e9f5780634b998de514611df25780634cdad50614611ded5780634dedf20e14611db0578063568efc0714611d9357806362518ddf14611d6a57806369fe0e2d14611cb05780636e553f6514611c6e5780636fda386814611c1257806370a0823114611bdb578063715018a614611b765780637224a51214611a8c5780637299aa3114611683578063762c31ba1461164957806379ba5097146115c35780637cc4d9a1146115925780637ecebe001461155a57806384755b5f1461140357806384b0196e1461130b5780638a2c7b39146112d65780638da5cb5b146112ae57806394bf804d1461126c57806395d89b41146111b55780639d6b4a45146110da578063a17b3130146110bd578063a31be5d614611076578063a5f31d611461101a578063a9059cbb14610fe9578063ac9650d814610e84578063aea70acc14610e47578063b192a84a14610dae578063b3d7f6b914610d7a578063b460af9414610d44578063b84c824614610ba1578063ba08765214610b6a578063bc25cf7714610a7d578063c47f0027146108c0578063c63d75b61461087d578063c6e6f59214610405578063c9649aa914610805578063cc718f76146107bc578063ce96cb7714610794578063d33219b414610777578063d505accf14610632578063d905777e146105fe578063dd62ed3e146105ae578063ddca3f4314610588578063e30c397814610560578063e66f53b714610538578063e74b981b14610486578063e90956cf1461040a578063ef8b30f714610405578063f2fde38b146103995763f7d185211461035d575f80fd5b346103955760203660031901126103955760043560145481101561039557610386602091612ce5565b90549060031b1c604051908152f35b5f80fd5b34610395576020366003190112610395576103b2612b71565b6103ba61324b565b600980546001600160a01b0319166001600160a01b039283169081179091556008549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227005f80a3005b612dc6565b3461039557602036600319011261039557610423612b71565b61042b61324b565b600a546001600160a01b039182169181168214610477576001600160a01b0319168117600a557fbd0a63c12948fbc9194a5839019f99c9d71db924e5c70018265bc778b8f1a5065f80a2005b63a741a04560e01b5f5260045ffd5b346103955760203660031901126103955761049f612b71565b6104a761324b565b6012546001600160a01b0382169190606081901c83146104775782159081610525575b50610516576104d761378c565b6001600160601b036012549181199060601b169116176012557f2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a735f80a2005b6333fe7c6560e21b5f5260045ffd5b6001600160601b039150161515836104ca565b34610395575f36600319011261039557600a546040516001600160a01b039091168152602090f35b34610395575f366003190112610395576009546040516001600160a01b039091168152602090f35b34610395575f3660031901126103955760206001600160601b0360125416604051908152f35b34610395576040366003190112610395576105c7612b71565b6105cf612b87565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b3461039557602036600319011261039557602061062a61062461061f612b71565b613de0565b9161386f565b604051908152f35b346103955760e03660031901126103955761064b612b71565b610653612b87565b604435906064359260843560ff8116810361039557844211610764576107276107309160018060a01b03841696875f52600760205260405f20908154916001830190556040519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528a604084015260018060a01b038916606084015289608084015260a083015260c082015260c081526106f560e082612c17565b51902061070061325f565b906040519161190160f01b83526002830152602282015260c43591604260a4359220614a61565b90929192614b01565b6001600160a01b031684810361074d575061074b935061410a565b005b84906325c0072360e11b5f5260045260245260445ffd5b8463313c898160e11b5f5260045260245ffd5b34610395575f366003190112610395576020600e54604051908152f35b346103955760203660031901126103955760206107b261061f612b71565b5050604051908152f35b34610395576020366003190112610395576004355f52600d602052606060405f20546040519060018060b81b038116825260ff8160b81c161515602083015260c01c6040820152f35b34610395575f366003190112610395576008546001600160a01b031633141580610868575b610859575f601155337f921828337692c347c634c5d2aacbc7b756014674bd236f3cc2058d8e284a951b5f80a2005b637cf97e4d60e11b5f5260045ffd5b50600c546001600160a01b031633141561082a565b3461039557602036600319011261039557610896612b71565b50602061062a6108ba6108a761361c565b6108af612fad565b509290600254612f03565b9061386f565b34610395576108ce36612d88565b6108d661324b565b80516001600160401b038111610a69576108f1601854612def565b601f8111610a01575b506020601f821160011461096f57918161095f927f4df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf02945f91610964575b508160011b915f199060031b1c1916176018555b604051918291602083526020830190612b24565b0390a1005b905082015185610937565b601f1982169060185f525f80516020614c9d833981519152915f5b8181106109e95750927f4df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf0294926001928261095f96106109d1575b5050811b0160185561094b565b8401515f1960f88460031b161c1916905585806109c4565b9192602060018192868901518155019401920161098a565b60185f52601f820160051c5f80516020614c9d833981519152019060208310610a54575b601f0160051c5f80516020614c9d83398151915201905b818110610a4957506108fa565b5f8155600101610a3c565b5f80516020614c9d8339815191529150610a25565b634e487b7160e01b5f52604160045260245ffd5b3461039557602036600319011261039557610a96612b71565b6013546001600160a01b0316908115610b5b576040516370a0823160e01b81523060048201526001600160a01b039190911691602082602481865afa918215610b50575f92610b1a575b5081610aec9184613da0565b6040519081527f2ae72b44f59d038340fca5739135a1d51fc5ab720bb02d983e4c5ff4119ca7b860203392a3005b9091506020813d602011610b48575b81610b3660209383612c17565b81010312610395575190610aec610ae0565b3d9150610b29565b6040513d5f823e3d90fd5b63d92e233d60e01b5f5260045ffd5b3461039557602061062a610b7d36612cfd565b929190610b8861378c565b610b986002546016549084613bc5565b93849133613c7b565b3461039557610baf36612d88565b610bb761324b565b80516001600160401b038111610a6957610bd2601954612def565b601f8111610cdc575b506020601f8211600114610c4a57918161095f927fadf3ae8bd543b3007d464f15cb8ea1db3f44e84d41d203164f40b95e27558ac6945f91610c3f575b508160011b915f199060031b1c191617601955604051918291602083526020830190612b24565b905082015185610c18565b601f1982169060195f525f80516020614cbd833981519152915f5b818110610cc45750927fadf3ae8bd543b3007d464f15cb8ea1db3f44e84d41d203164f40b95e27558ac694926001928261095f9610610cac575b5050811b0160195561094b565b8401515f1960f88460031b161c191690558580610c9f565b91926020600181928689015181550194019201610c65565b60195f52601f820160051c5f80516020614cbd833981519152019060208310610d2f575b601f0160051c5f80516020614cbd83398151915201905b818110610d245750610bdb565b5f8155600101610d17565b5f80516020614cbd8339815191529150610d00565b3461039557602061062a610d5736612cfd565b9291610d6161378c565b610d716002546016549083613829565b93849233613c7b565b3461039557602036600319011261039557602061062a610da6610d9b612fad565b509190600254612f03565b600435613b81565b3461039557604036600319011261039557610dc7612b71565b6024359081151580920361039557610ddd61324b565b6001600160a01b03165f818152600b602052604090205490919060ff16151581146104775760207f74dc60cbc81a9472d04ad1d20e151d369c41104d655ed3f2f3091166a502cd8d91835f52600b825260405f2060ff1981541660ff8316179055604051908152a2005b34610395575f36600319011261039557602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610395576020366003190112610395576004356001600160401b03811161039557610eb4903690600401612bb1565b90610ebe82612ecb565b91610ecc6040519384612c17565b808352601f19610edb82612ecb565b015f5b818110610fd8575050905f90601e1981360301915b83811015610f71578060051b82013583811215610395578201908135916001600160401b038311610395576020018236038113610395575f80610f3d610f55936001963691612d52565b602081519101305af4610f4e613c4c565b903061485d565b610f5f8288612eef565b52610f6a8187612eef565b5001610ef3565b846040518091602082016020835281518091526040830190602060408260051b8601019301915f905b828210610fa957505050500390f35b91936001919395506020610fc88192603f198a82030186528851612b24565b9601920192018594939192610f9a565b806060602080938801015201610ede565b346103955760403660031901126103955761100f611005612b71565b602435903361318e565b602060405160018152f35b34610395575f36600319011261039557600f546001600160401b038160a01c1680156110675742106110585761074b906001600160a01b0316613c02565b63333bd2cb60e11b5f5260045ffd5b63e5f408a560e01b5f5260045ffd5b34610395576020366003190112610395576004355f908152601060209081526040918290205482516001600160c01b038216815260c09190911c91810191909152f35b0390f35b34610395575f366003190112610395576020601454604051908152f35b34610395576020366003190112610395576110f3612b71565b6110fb61324b565b600c546001600160a01b03828116929116828114610477576001600160401b03600f5460a01c166111a6576111345761074b9150613c02565b50611155600e54826001600160601b0360a01b600f541617600f5542612f03565b600f805467ffffffffffffffff60a01b191660a09290921b67ffffffffffffffff60a01b169190911790557f7633313af54753bce8a149927263b1a55eba857ba4ef1d13c6aee25d384d3c4b5f80a2005b6324d9026760e11b5f5260045ffd5b34610395575f366003190112610395576040515f6019546111d581612def565b808452906001811690811561124857506001146111fd575b6110b98361094b81850382612c17565b60195f9081525f80516020614cbd833981519152939250905b80821061122e5750909150810160200161094b6111ed565b919260018160209254838588010152019101909291611216565b60ff191660208086019190915291151560051b8401909101915061094b90506111ed565b3461039557604036600319011261039557602060043561062a61128d612b87565b9161129661378c565b6112a66002546016549083613b81565b8093336138b4565b34610395575f366003190112610395576008546040516001600160a01b039091168152602090f35b34610395575f366003190112610395576011548060c01c80156110675742106110585761074b906001600160c01b0316613979565b34610395575f366003190112610395576113a76113477f00000000000000000000000000000000000000000000000000000000000000006147c6565b6113707f0000000000000000000000000000000000000000000000000000000000000000614826565b60206113b5604051926113838385612c17565b5f84525f368137604051958695600f60f81b875260e08588015260e0870190612b24565b908582036040870152612b24565b4660608501523060808501525f60a085015283810360c08501528180845192838152019301915f5b8281106113ec57505050500390f35b8351855286955093810193928101926001016113dd565b346103955760a03660031901126103955761141d36612c38565b600a546001600160a01b031633141580611545575b6115365760a09020805f52600d60205260405f205460c01c6111a6575f818152600d60205260409020546001600160b81b031661152757805f52600d60205260ff60405f205460b81c161561151557805f52601060205260405f205460c01c611504576114dd6001600160401b036114ac600e5442612f03565b5f848152600d6020526040902080546001600160c01b03169290911660c01b6001600160c01b031916919091179055565b337f3240fc70754c5a2b4dab10bf7081a00024bfc8491581ee3d355360ec0dd91f165f80a3005b62463af360e81b5f5260045260245ffd5b636113d8c760e01b5f5260045260245ffd5b63624718b960e11b5f5260045ffd5b6332a2673b60e21b5f5260045ffd5b506008546001600160a01b0316331415611432565b34610395576020366003190112610395576001600160a01b0361157b612b71565b165f526007602052602060405f2054604051908152f35b34610395575f36600319011261039557601154604080516001600160c01b038316815260c09290921c602083015290f35b34610395575f36600319011261039557600954336001600160a01b039091160361163657600980546001600160a01b0319908116909155600880543392811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b63118cdaa760e01b5f523360045260245ffd5b34610395575f36600319011261039557600f54604080516001600160a01b038316815260a09290921c6001600160401b0316602083015290f35b34610395576020366003190112610395576004356001600160401b03811161039557366023820112156103955780600401356001600160401b0381116103955736602460c083028401011161039557335f52600b60205260ff60405f2054161580611a77575b80611a62575b611a53575f918290815b83831015611a3c5760c083028201906023198236030160c08112610395576040519060408201908282106001600160401b03831117610a695760a091604052126103955760a060405161174b81612be1565b61175760248601612b9d565b815261176560448601612b9d565b602082015261177660648601612b9d565b604082015261178760848601612b9d565b606082015260a4850135608082015280835260c46020840195013585522092835f52600d60205260ff60405f205460b81c1615611a29576117c9848351613a3d565b5082518083118184030294929085156118e95750505f9251156118de575b5051604051635c2bea4960e01b81529290611806906004850190612f26565b60a483015260c48201523060e48201819052610104820152604081610124815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1918215610b50576001936118a1935f935f916118aa575b506040519084825260208201527fdd8bf5226dff861316e0fa7863fdb7dc7b87c614eb29a135f524eb79d5a1189a60403392a3612f03565b925b01916116f9565b90506118ce91935060403d81116118d7575b6118c68183612c17565b810190612f10565b9290928a611869565b503d6118bc565b5f93509150896117e7565b9293509497999350505f1981145f14611a1c575081860382871102925b8315611a0e575f858152600d60205260409020546001600160b81b03169061192f908590612f03565b116119fb5790604061195993925181518095819263a99aad8960e01b835286309160048501612f65565b03815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1938415610b50576001946119d5945f916119db575b506040519084825260208201527f89bf199df65bf65155e3e0a8abc4ad4a1be606220c8295840dba2ab5656c1f6d60403392a3612f03565b946118a3565b6119f3915060403d81116118d7576118c68183612c17565b90508a61199d565b83635e25afa560e01b5f5260045260245ffd5b5050959050600191506118a3565b8380820391110292611906565b83636113d8c760e01b5f5260045260245ffd5b8403611a4457005b6309e36b8960e41b5f5260045ffd5b63f7137c0f60e01b5f5260045ffd5b506008546001600160a01b03163314156116ef565b50600a546001600160a01b03163314156116e9565b3461039557602036600319011261039557600435611aa861324b565b600e548082146104775760115460c01c6111a657621275008211611b6757620151808210611b585780821115611ae2575061074b90613979565b601180546001600160c01b0319166001600160b81b0384161790557fb3aa0ade2442acf51d06713c2d1a5a3ec0373cce969d42b53f4689f97bccf38091602091611b2c9042612f03565b601180546001600160c01b031660c09290921b6001600160c01b031916919091179055604051908152a1005b631a1593df60e11b5f5260045ffd5b6346fedb5760e01b5f5260045ffd5b34610395575f36600319011261039557611b8e61324b565b600980546001600160a01b03199081169091556008805491821690555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610395576020366003190112610395576001600160a01b03611bfc612b71565b165f525f602052602060405f2054604051908152f35b346103955760a036600319011261039557611c2c36612c38565b60a081205f52601060205260405f205460c01c8015611067574210611058578060a061074b9220805f52601060205260018060b81b0360405f2054169161345e565b3461039557604036600319011261039557602060043561062a611c8f612b87565b611c9761378c565b611ca7600254601654908561386f565b928391336138b4565b3461039557602036600319011261039557600435611ccc61324b565b6012546001600160601b0381168214610477576706f05b59d3b200008211611d5b578115159081611d4f575b50610516576001600160601b0390611d0e61378c565b16806001600160601b031960125416176012556040519081527f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb4960203392a2005b905060601c1582611cf8565b63f4df6ae560e01b5f5260045ffd5b346103955760203660031901126103955760043560155481101561039557610386602091612cb9565b34610395575f366003190112610395576020601654604051908152f35b34610395576020366003190112610395576001600160a01b03611dd1612b71565b165f52600b602052602060ff60405f2054166040519015158152f35b612b48565b346103955760203660031901126103955760043560018060a01b03600c541633141580611e8a575b80611e75575b611e66575f818152600d6020526040812080546001600160c01b0316905533907fcbeb8ecdaa5a3c133e62219b63bfc35bce3fda13065d2bed32e3b7dde60a59f49080a3005b63d080fa3160e01b5f5260045ffd5b506008546001600160a01b0316331415611e20565b50600a546001600160a01b0316331415611e1a565b34610395575f36600319011261039557602060125460601c604051908152f35b34610395575f36600319011261039557600c546040516001600160a01b039091168152602090f35b34610395576020366003190112610395576004356001600160401b03811161039557611f17903690600401612bb1565b90335f52600b60205260ff60405f2054161580612237575b80612222575b611a5357601554611f4581612ecb565b611f526040519182612c17565b818152601f19611f6183612ecb565b01366020830137611f7184612ecb565b92611f7f6040519485612c17565b848452611f8b85612ecb565b602085019590601f19013687375f5b8181106121c2575050505f5b8281106120c35750505080516001600160401b038111610a6957600160401b8111610a69576015548160155580821061207f575b508260155f525f5b82811061204b5750505060405190602082019060208352518091526040820192905f5b81811061203557337fe0c2db6b54586be6d7d49943139fccf0dd315ba63e55364a76c73cd8fdba724d85870386a2005b8251855260209485019490920191600101612005565b60019060208351930192817f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475015501611fe2565b60155f527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4759081019082015b8181106120b85750611fda565b5f81556001016120ab565b6120cd8183612eef565b51156120dc575b600101611fa6565b6120e581612cb9565b905460039190911b1c5f818152600d60205260409020546001600160b81b03166121b057805f52601060205260405f205460c01c6115045761214830827f00000000000000000000000000000000000000000000000000000000000000006136d4565b612160575b5f908152600d60205260408120556120d4565b805f52600d60205260405f205460c01c1561219e57805f52600d60205260405f205460c01c42101561214d57632cd5119960e21b5f5260045260245ffd5b63af8ae28760e01b5f5260045260245ffd5b63401d83d960e11b5f5260045260245ffd5b6121cd818385612ea8565b356121d781612cb9565b90549060031b1c906121e98187612eef565b5161220f579060016121fd81949388612eef565b526122088289612eef565b5201611f9a565b506392a726c360e01b5f5260045260245ffd5b506008546001600160a01b0316331415611f35565b50600a546001600160a01b0316331415611f2f565b3461039557602036600319011261039557612265612b71565b50602061062a61361c565b346103955760c03660031901126103955761228a36612c38565b60a4359060018060a01b03600a5416331415806124e4575b6115365760a0812081519092906001600160a01b039081167f0000000000000000000000000000000000000000000000000000000000000000909116036124d15760405160208101908482526003604082015260408152612304606082612c17565b519020600281018091116124bd575f61231f6123399261416d565b60405180938192637784c68560e01b8352600483016133f4565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610b50576001600160801b0391612388915f9161249b575b50612ee2565b51161561248c57825f52601060205260405f205460c01c6111a657825f52600d60205260405f205460c01c61247d575f838152600d60205260409020546001600160b81b0316818114610477578110156123ef57916123e961074b9361342d565b9161345e565b9050815f52601060205261244f60405f206001600160401b036124306124148561342d565b600e549060018060b81b03168360c01b85541617845542612f03565b82546001600160c01b0316911660c01b6001600160c01b031916179055565b6040519081527fe851bb5856808a50efd748be463b8f35bcfb5ec74c5bfde776fe0a4d2a26db2760203392a3005b6325f600a360e11b5f5260045ffd5b6396e1352960e01b5f5260045ffd5b6124b791503d805f833e6124af8183612c17565b81019061337b565b86612382565b634e487b7160e01b5f52601160045260245ffd5b826333cbfd2760e21b5f5260045260245ffd5b506008546001600160a01b03163314156122a2565b34610395575f366003190112610395576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610395575f366003190112610395576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610395575f366003190112610395576013546040516001600160a01b039091168152602090f35b34610395575f36600319011261039557602061062a61325f565b34610395575f366003190112610395576020601554604051908152f35b34610395575f3660031901126103955760ff7f00000000000000000000000000000000000000000000000000000000000000001660ff7f0000000000000000000000000000000000000000000000000000000000000000160160ff81116124bd5760209060ff60405191168152f35b3461039557602036600319011261039557612668612b71565b61267061324b565b6013546001600160a01b039182169181168214610477576001600160a01b03191681176013557f2e7908865670e21b9779422cadf5f1cba271a62bb95c71eaaf615c0a1c48ebee5f80a2005b34610395576020366003190112610395576004356001600160401b038111610395576126ec903690600401612bb1565b335f52600b60205260ff60405f205416158061289d575b80612888575b611a5357601e8111612879575f5b81811061282c57506001600160401b038111610a6957600160401b8111610a6957601454816014558082106127e8575b508160145f525f5b8281106127b457505060405190806020830160208452526040820192905f5b81811061279e57337f6ce31538fc7fba95714ddc8a275a09252b4b1fb8f33d2550aa58a5f62ad934de85870386a2005b823585526020948501949092019160010161276e565b60019060208335930192817fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec01550161274f565b60145f527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec9081019082015b8181106128215750612747565b5f8155600101612814565b612837818385612ea8565b355f908152600d60205260409020546001600160b81b03161561285c57600101612717565b9061286692612ea8565b3563067f0a2560e41b5f5260045260245ffd5b6340797bd760e11b5f5260045ffd5b506008546001600160a01b0316331415612709565b50600a546001600160a01b0316331415612703565b346103955760603660031901126103955761100f6128ce612b71565b6128d6612b87565b604435916128e58333836130c8565b61318e565b34610395575f366003190112610395576020601754604051908152f35b34610395575f366003190112610395576008546001600160a01b03163314158061295b575b610859575f600f55337fc40a085ccfa20f5fd518ade5c3a77a7ecbdfbb4c75efcdca6146a8e3c841d6635f80a2005b50600c546001600160a01b031633141561292c565b34610395575f366003190112610395576020600254604051908152f35b346103955760203660031901126103955760043560018060a01b03600c541633141580612a09575b806129f4575b611e6657805f5260106020525f6040812055337f1026ceca5ed3747eb5edec555732d4a6f901ce1a875ecf981064628cadde11205f80a3005b506008546001600160a01b03163314156129bb565b50600a546001600160a01b03163314156129b5565b3461039557602036600319011261039557602061062a612a3f610d9b612fad565b600435613829565b346103955760403660031901126103955761100f612a63612b71565b602435903361410a565b34610395575f366003190112610395576040515f601854612a8d81612def565b80845290600181169081156112485750600114612ab4576110b98361094b81850382612c17565b60185f9081525f80516020614c9d833981519152939250905b808210612ae55750909150810160200161094b6111ed565b919260018160209254838588010152019101909291612acd565b34610395575f366003190112610395576020612b19612fad565b509050604051908152f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b3461039557602036600319011261039557602061062a612b69610d9b612fad565b600435613bc5565b600435906001600160a01b038216820361039557565b602435906001600160a01b038216820361039557565b35906001600160a01b038216820361039557565b9181601f84011215610395578235916001600160401b038311610395576020808501948460051b01011161039557565b60a081019081106001600160401b03821117610a6957604052565b60c081019081106001600160401b03821117610a6957604052565b90601f801991011681019081106001600160401b03821117610a6957604052565b60a09060031901126103955760405190612c5182612be1565b816004356001600160a01b03811681036103955781526024356001600160a01b03811681036103955760208201526044356001600160a01b03811681036103955760408201526064356001600160a01b03811681036103955760608201526080608435910152565b601554811015612cd15760155f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b601454811015612cd15760145f5260205f2001905f90565b606090600319011261039557600435906024356001600160a01b038116810361039557906044356001600160a01b03811681036103955790565b6001600160401b038111610a6957601f01601f191660200190565b929192612d5e82612d37565b91612d6c6040519384612c17565b829481845281830111610395578281602093845f960137010152565b602060031982011261039557600435906001600160401b038211610395578060238301121561039557816024612dc393600401359101612d52565b90565b3461039557602036600319011261039557602061062a612de7610d9b612fad565b60043561386f565b90600182811c92168015612e1d575b6020831014612e0957565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612dfe565b5f9291815491612e3683612def565b8083529260018116908115612e8b5750600114612e5257505050565b5f9081526020812093945091925b838310612e71575060209250010190565b600181602092949394548385870101520191019190612e60565b915050602093945060ff929192191683830152151560051b010190565b9190811015612cd15760051b0190565b818102929181159184041417156124bd57565b6001600160401b038111610a695760051b60200190565b805115612cd15760200190565b8051821015612cd15760209160051b010190565b919082018092116124bd57565b9190826040910312610395576020825192015190565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015190911690830152608090810151910152565b91612f74836101409593612f26565b60a08301525f60c083015260018060a01b031660e08201526101206101008201525f6101208201520190565b919082039182116124bd57565b5f905f806015547f00000000000000000000000000000000000000000000000000000000000000005b8183106130755750505060165491601754612ff18185612fa0565b83101561306757506130176130106130098486612fa0565b8094612f03565b9384612fa0565b80151580613053575b6130275750565b613050919450613043906001600160601b036012541690613fe4565b6002546106248286612fa0565b92565b506001600160601b03601254161515613020565b613010613017918094612f03565b9091926130bf6001916130b961309961308d88612cb9565b90549060031b1c613eca565b6130b16130aa3060a08420896136d4565b91876141e5565b5050916147a0565b90612f03565b93019190612fd6565b6001600160a01b039081165f81815260016020818152604080842095871684529490529290205493929184016130ff575b50505050565b82841061316b578015613158576001600160a01b03821615613145575f52600160205260405f209060018060a01b03165f5260205260405f20910390555f8080806130f9565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b508290637dc7a0d960e11b5f5260018060a01b031660045260245260445260645ffd5b6001600160a01b0316908115613238576001600160a01b031691821561322557815f525f60205260405f205481811061320c57817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b634b637e8f60e11b5f525f60045260245ffd5b6008546001600160a01b0316330361163657565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480613352575b156132ba577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261334c60c082612c17565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614613291565b602081830312610395578051906001600160401b03821161039557019080601f830112156103955781516133ae81612ecb565b926133bc6040519485612c17565b81845260208085019260051b82010192831161039557602001905b8282106133e45750505090565b81518152602091820191016133d7565b60206040818301928281528451809452019201905f5b8181106134175750505090565b825184526020938401939092019160010161340a565b6001600160b81b038111613447576001600160b81b031690565b6306dfcc6560e41b5f5260b860045260245260445ffd5b5f828152600d6020526040902093926001600160b81b031690816134d0575b508192938168ffffffffffffffffff60b81b8254161790556040519081527fe86b6d3313d3098f4c5f689c935de8fde876a597c185def2cedab85efedac68660203392a35f5260106020525f6040812055565b60ff855460b81c16156134f2575b5083546001600160c01b031684558161347d565b601554600160401b811015610a69578060016135119201601555612cb9565b81549060031b9085821b915f19901b1916179055601e601554116128795761358761358c91600160b81b60ff60b81b198854161787556130b9601654916130b17f0000000000000000000000000000000000000000000000000000000000000000916135813060a08320856136d4565b926141e5565b614194565b604051936020850160208652601554809152604086019060155f527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec475905f5b818110613606575050507fe0c2db6b54586be6d7d49943139fccf0dd315ba63e55364a76c73cd8fdba724d8685969733930390a293926134de565b82548452602090930192600192830192016135cb565b5f905f6014547f00000000000000000000000000000000000000000000000000000000000000005b81831061365057505050565b90919361365c85612ce5565b905460039190911b1c5f818152600d60205260409020546001600160b81b03169081156136c957916136bf916136b36001946136ab6136a561369f30848b6136d4565b92613eca565b886141e5565b5050916144cd565b80820391110290612f03565b945b019190613644565b5050936001906136c1565b61372f61374b935f936040516020810191825260026040820152604081526136fd606082612c17565b51902060405190602082019260018060a01b03168352604082015260408152613727606082612c17565b51902061416d565b906040518080958194637784c68560e01b8352600483016133f4565b03916001600160a01b03165afa8015610b505761376e915f916137725750612ee2565b5190565b61378691503d805f833e6124af8183612c17565b5f612382565b7ff66f28b40975dbb933913542c7e6a0f50a1d0f20aa74ea6e0efe65ab616323ec60407f548669ea9bcc24888e6d74a69c9865fa98d795686853b8aa3eb87814261bbb7160206137da612fad565b6137e78295939492614194565b806017558551908152a180613804575b82519182526020820152a1565b6138138160125460601c61450c565b6137f7565b60ff16604d81116124bd57600a0a90565b90613857906130b97f0000000000000000000000000000000000000000000000000000000000000000613818565b91600181018091116124bd57612dc392600192614569565b9061389d906130b97f0000000000000000000000000000000000000000000000000000000000000000613818565b91600181018091116124bd57612dc3925f92614569565b92613977937fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7604061358795946139448251946323b872dd60e01b602087015260018060a01b0316948560248201523060448201528760648201526064815261391e608482612c17565b7f00000000000000000000000000000000000000000000000000000000000000006149ed565b61394e858261450c565b815186815260208101959095526001600160a01b031693a361396f816145b9565b601654612f03565b565b80600e556040519081527fd28e9b90ee9b37c5936ff84392d71f29ff18117d7e76bcee60615262a90a3f7560203392a25f601155565b51906001600160801b038216820361039557565b908160c091031261039557613a3560a0604051926139e084612bfc565b6139e9816139af565b84526139f7602082016139af565b6020850152613a08604082016139af565b6040850152613a19606082016139af565b6060850152613a2a608082016139af565b6080850152016139af565b60a082015290565b905f915f60a0604051613a4f81612bfc565b82815282602082015282604082015282606082015282608082015201527f00000000000000000000000000000000000000000000000000000000000000009060018060a01b03821690813b1561039557604051630a8e0d6f60e11b815290613abb906004830190612f26565b5f8160a48183865af18015610b5057613b6b575b5060c060249160405192838092632e3071cd60e11b82528760048301525afa938415613b5f5793613b26575b50613b0c61305091849330916136d4565b926001600160801b036020818351169201511690846147a0565b613050919350613b50613b0c9160c03d60c011613b58575b613b488183612c17565b8101906139c3565b939150613afb565b503d613b3e565b604051903d90823e3d90fd5b613b789194505f90612c17565b5f9260c0613acf565b600183018093116124bd57612dc392613bbf6001936130b97f0000000000000000000000000000000000000000000000000000000000000000613818565b91614569565b600183018093116124bd57612dc392613bbf5f936130b97f0000000000000000000000000000000000000000000000000000000000000000613818565b600c80546001600160a01b0319166001600160a01b03929092169182179055337fcb11cc8aade2f5a556749d1b2380d108a16fac3431e6a5d5ce12ef9de0bd76e35f80a35f600f55565b3d15613c76573d90613c5d82612d37565b91613c6b6040519384612c17565b82523d5f602084013e565b606090565b9193613c8f60165485808203911102614194565b613c98846148bb565b6001600160a01b0385811695908416938290878603613d8f575b505050841561323857845f525f60205260405f2054818110613d765791816040927ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db94885f525f60205203835f205580600254036002555f877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208651858152a3613d5f86837f0000000000000000000000000000000000000000000000000000000000000000613da0565b825195865260208601526001600160a01b031693a4565b8563391434e360e21b5f5260045260245260445260645ffd5b613d98926130c8565b5f8181613cb2565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815261397791613ddb606483612c17565b6149ed565b613e1590613dec612fad565b50613dfb819492600254612f03565b9260018060a01b03165f525f6020528260405f2054613bc5565b6015549290805f7f00000000000000000000000000000000000000000000000000000000000000005b868210613e54575b505061305092939450612fa0565b9092613e9b613e6285612cb9565b90549060031b1c613e95613e81613e7883613eca565b923090876136d4565b613e8b83876141e5565b50939180936147a0565b92614bef565b808203911102928315613eb15760010190613e3e565b613e46565b51906001600160a01b038216820361039557565b5f6080604051613ed981612be1565b828152826020820152826040820152826060820152015260405190632c3c915760e01b8252600482015260a081602481600180851b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610b50575f91613f44575090565b905060a0813d60a011613fbe575b81613f5f60a09383612c17565b8101031261039557608060405191613f7683612be1565b613f7f81613eb6565b8352613f8d60208201613eb6565b6020840152613f9e60408201613eb6565b6040840152613faf60608201613eb6565b60608401520151608082015290565b3d9150613f52565b8115613fd0570490565b634e487b7160e01b5f52601260045260245ffd5b9190915f838202915f19858209918380841093039280840393146140635782670de0b6b3a7640000111561405457507faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106699394670de0b6b3a7640000910990828211900360ee1b910360121c170290565b63227bc15360e01b8152600490fd5b505050670de0b6b3a76400009192500490565b9091828202915f19848209938380861095039480860395146140fd57848311156140ee57829109815f0382168092046002816003021880820260020302808202600203028082026002030280820260020302808202600203028091026002030293600183805f03040190848311900302920304170290565b63227bc15360e01b5f5260045ffd5b505090612dc39250613fc6565b6001600160a01b0316908115613158576001600160a01b03169182156131455760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526001825260405f20855f5282528060405f2055604051908152a3565b6040519061417c604083612c17565b600182526020368184013761419082612ee2565b5290565b60207f15c027cc4fd826d986cad358803439f7326d3aa4ed969ff90dbee4bc150f68e99180601655604051908152a1565b906001600160801b03809116911601906001600160801b0382116124bd57565b9060c060a08220602460405180958193632e3071cd60e11b8352600483015260018060a01b03165afa918215610b50575f926144ac575b50608082016142356001600160801b0382511642612fa0565b9182151580614496575b80614480575b614283575b5050506001600160801b038151166001600160801b03602083015116926001600160801b03606081604086015116940151169193929190565b6060810151604051638c00bf6b60e01b8152916001600160a01b03909116906142b0906004840190612f26565b6001600160801b0385511660a483015260208501936001600160801b0385511660c48401526001600160801b0360408701948186511660e48601528160608901511661010486015251166101248401526020836101648160a08a01956001600160801b038751166101448301525afa928315610b50575f9361444a575b506143906001600160801b039361438a614354670de0b6b3a7640000948789511693612eb8565b614385671bc16d674ec8000061436a8380612eb8565b046729a2241af62c000061437e8483612eb8565b0492612f03565b612f03565b90612eb8565b0492826143a861439f86614b7d565b828451166141c5565b169052816143c16143b885614b7d565b828851166141c5565b168552511690811561424a57670de0b6b3a7640000916143e091612eb8565b046143f5816001600160801b03855116612fa0565b6001600160801b0383511691620f424083018093116124bd57600182018092116124bd5761443a61443f926144356001600160801b039561439f94612eb8565b613fc6565b614b7d565b1690525f808061424a565b92506020833d602011614478575b8161446560209383612c17565b810103126103955791519161439061432d565b3d9150614458565b5060608101516001600160a01b03161515614245565b506001600160801b03604085015116151561423f565b6144c691925060c03d60c011613b5857613b488183612c17565b905f61421c565b90600181018091116124bd57620f42408301918284116124bd57620f423f916144f591612eb8565b9201918183116124bd57612dc39261443591612f03565b6001600160a01b0316908115613225577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208261454d5f94600254612f03565b60025584845283825260408420818154019055604051908152a3565b9190600180614579848487614076565b9561458381614ae3565b161492836145a4575b5050506145965790565b600181018091116124bd5790565b909180935015613fd0570915155f808061458c565b7f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0382165f5b601454811015614787576145fa81612ce5565b905460039190911b1c5f818152600d60205260409020546001600160b81b0316801561477d5761462982613eca565b91843b1561039557604051630a8e0d6f60e11b815261464b6004820185612f26565b5f8160a481838a5af18015610b505761476d575b50604051632e3071cd60e11b8152600481018290529060c082602481895afa908115610b50576146b6925f92614749575b5061469d9030908a6136d4565b906001600160801b0360208183511692015116916144cd565b808203911102908185108583180280831892036146e0575b505082156130f9576001905b016145e7565b60406147029181518093819263a99aad8960e01b835286309160048501612f65565b03815f885af1908161472c575b5061471b575b806146ce565b6147259193612fa0565b915f614715565b6147439060403d81116118d7576118c68183612c17565b5061470f565b61469d9192506147669060c03d8111613b5857613b488183612c17565b9190614690565b5f61477791612c17565b5f61465f565b50506001906146da565b5050905061479157565b63ded0652d60e01b5f5260045ffd5b60018201929183106124bd57620f424082018092116124bd57612dc39261443591612eb8565b60ff811461480c5760ff811690601f82116147fd57604051916147ea604084612c17565b6020808452838101919036833783525290565b632cd44ac360e21b5f5260045ffd5b50604051612dc38161481f816005612e27565b0382612c17565b60ff811461484a5760ff811690601f82116147fd57604051916147ea604084612c17565b50604051612dc38161481f816006612e27565b90614881575080511561487257805190602001fd5b630a12f52160e11b5f5260045ffd5b815115806148b2575b614892575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b1561488a565b5f5b6015548110156149d7576148d081612cb9565b90549060031b1c6149086148ed6148e683613eca565b9283613a3d565b90506001600160801b03604081835116920151169084614bef565b9081841084831802808318920361492e575b5050811561492a576001016148bd565b5050565b604051635c2bea4960e01b81529061494a906004830190612f26565b8160a48201525f60c48201523060e482015230610104820152604081610124815f60018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af190816149ba575b506149a9575b8061491a565b6149b39192612fa0565b905f6149a3565b6149d19060403d81116118d7576118c68183612c17565b5061499d565b506149de57565b634323a55560e01b5f5260045ffd5b5f80614a159260018060a01b03169360208151910182865af1614a0e613c4c565b908361485d565b8051908115159182614a3d575b5050614a2b5750565b635274afe760e01b5f5260045260245ffd5b81925090602091810103126103955760200151801590811503610395575f80614a22565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411614ad8579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15610b50575f516001600160a01b03811615614ace57905f905f90565b505f906001905f90565b5050505f9160039190565b60041115614aed57565b634e487b7160e01b5f52602160045260245ffd5b614b0a81614ae3565b80614b13575050565b614b1c81614ae3565b60018103614b335763f645eedf60e01b5f5260045ffd5b614b3c81614ae3565b60028103614b57575063fce698f760e01b5f5260045260245ffd5b600390614b6381614ae3565b14614b6b5750565b6335e2f38360e21b5f5260045260245ffd5b604051614b8b604082612c17565b60148152731b585e081d5a5b9d0c4c8e08195e18d95959195960621b60208201526001600160801b038211614bc757506001600160801b031690565b60405162461bcd60e51b815260206004820152908190614beb906024830190612b24565b0390fd5b91614bfe602091602493612fa0565b92516040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529093849290918391165afa908115610b50575f91614c6a575b508181109082180218818110908218021890565b90506020813d602011614c94575b81614c8560209383612c17565b8101031261039557515f614c56565b3d9150614c7856feb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695a26469706673582212204e6b2a149fb8302d5ee0db6b16945d2e45b22bca063428a892ee0252205db2ac64736f6c634300081a00334df9dcd34ae35f40f2c756fd8ac83210ed0b76d065543ee73d868aec7c7fcf02a264697066735822122093c260bd8de13701861c5f59cdb4483666931f6d1d712c55579cfb1d5cc1203764736f6c634300081a0033";
    bytes constant MORPHO_BYTECODE =
        hex"6080604052600436101561001257600080fd5b6000803560e01c806313af403514612b90578063151c1ade14612b2057806320b76e81146128c1578063238d6579146126f75780632b4f013c1461256e5780632c3c9157146124dc5780633644e5151461248357806346904840146124315780634d98a93b1461231557806350d8cd4b146120815780635a64f51e14611fa95780635c2bea4914611d485780635c60e39a14611cb757806365e4ad9e14611c3757806370ae92d214611bd45780637784c68514611a685780638069218f1461167f5780638720316d1461150f5780638c1358a2146111f85780638da5cb5b146111a757806393c520621461110e578063a99aad8914610eda578063b485f3b814610e8d578063d8eabcb8146104e5578063e0232b4214610398578063e74b981b146102cd578063eecea000146101bb5763f2b863ce1461015157600080fd5b346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85760ff604060209273ffffffffffffffffffffffffffffffffffffffff6101a4612c5a565b168152600484522054166040519015158152f35b80fd5b50346101b85760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b8576101f3612c5a565b602435801515908181036102c85761029790338552600660205273ffffffffffffffffffffffffffffffffffffffff604086209416938460005260205261024f60ff604060002054161515841415610249612fdd565b90612f41565b3385526006602052604085208460005260205260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b60405190815233907fd5e969f01efe921d3f766bdebad25f0a05e3f237311f56482bf132d0326309c060203392a480f35b600080fd5b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85761036c610308612c5a565b7fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff91610350838654163314610249612f08565b826001549116938493610361612fdd565b908316851415612f41565b16176001557f2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a738280a280f35b50346101b85760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b8576103d0612c5a565b6024358260443567ffffffffffffffff81116104e15761040973ffffffffffffffffffffffffffffffffffffffff913690600401612de8565b91909461041f6104176132c2565b861515612f41565b1693846040518581527fc76f1b4fe4396ac07a9fa55a415d4ca430e72651d37d3401f3bed7cb13fc4f1260203392a361045984338761394a565b333b156104d25761049b91839160405193849283927f31f57072000000000000000000000000000000000000000000000000000000008452886004850161319c565b038183335af180156104d6576104be575b50506104bb9130903390613ab9565b80f35b6104c790612cc3565b6104d25782386104ac565b8280fd5b6040513d84823e3d90fd5b5080fd5b50346101b8576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85761051f36612d50565b9073ffffffffffffffffffffffffffffffffffffffff60a4351660a435036102c8576101043567ffffffffffffffff81116104e157610562903690600401612de8565b9160c4359260e4359260a0862093848452600360205261059f6fffffffffffffffffffffffffffffffff6002604087200154161515610249613016565b6105b46105aa6130f9565b8215881518612f41565b6105be858861336e565b6004602073ffffffffffffffffffffffffffffffffffffffff60408a015116604051928380927fa035b1fe0000000000000000000000000000000000000000000000000000000082525afa908115610e82578591610e50575b506106666106298260a435898c61376d565b156040519061063782612cf3565b601382527f706f736974696f6e206973206865616c746879000000000000000000000000006020830152612f41565b6080880151670de0b6b3a764000003670de0b6b3a76400008111610ca057670429d069189e00009080820291820403610ccd57670de0b6b3a764000090049182670de0b6b3a76400000392670de0b6b3a76400008411610e2357670de0b6b3a764000014610df4578715610cfc57506106df908761383b565b6ec097ce7bc90715b34b9f0fffffffff8101809111610ccd576ec097ce7bc90715b34b9f1000000000900480670de0b6b3a7640000810204670de0b6b3a76400001481151715610ccd57670ff59ee833b300006ec097ce7bc90715b34b9f10000000008390048082189082110281187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810111610ca057610807926107d9926ec097ce7bc90715b34b9f10000000009190910480831890831102909118906107d4907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830190670de0b6b3a76400000261316b565b61384e565b85855260036020526001604086200154906fffffffffffffffffffffffffffffffff8260801c921690613c33565b935b808452600360205261083960016040862001546fffffffffffffffffffffffffffffffff8160801c911687613c55565b9461084381613c78565b82865260026020526040862073ffffffffffffffffffffffffffffffffffffffff60a4351660005260205260016040600020016fffffffffffffffffffffffffffffffff61089582549382851661322e565b167fffffffffffffffffffffffffffffffff000000000000000000000000000000008093161790556109266108c983613c78565b84885260036020526108e6600160408a200191825460801c61322e565b6fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff0000000000000000000000000000000083549260801b169116179055565b82865260036020526109576fffffffffffffffffffffffffffffffff60016040892001541688808203911102613c78565b83875260036020526fffffffffffffffffffffffffffffffff600160408920019116828254161790556109cd61098c89613c78565b84885260026020526040882073ffffffffffffffffffffffffffffffffffffffff60a435166000526020526108e6600160406000200191825460801c61322e565b8590869084885260026020526040882073ffffffffffffffffffffffffffffffffffffffff60a4351660005260205260016040600020015460801c15610b39575b506040519288845260208401528860408401526060830152608082015273ffffffffffffffffffffffffffffffffffffffff60a43516917fa4946ede45d0c6f06a0f5ce92c9ad3b4751452d2fe0e25010783bcab57a67e4160a03393a4610a90853373ffffffffffffffffffffffffffffffffffffffff60208a01511661394a565b81610acc575b505050610ac08173ffffffffffffffffffffffffffffffffffffffff604095511630903390613ab9565b82519182526020820152f35b333b156104d257610b0e91839160405193849283927fcf7ea196000000000000000000000000000000000000000000000000000000008452886004850161319c565b038183335af180156104d657610b25575b80610a96565b610b2f8291612cc3565b6101b85780610b1f565b91505082865260026020526040862073ffffffffffffffffffffffffffffffffffffffff60a435166000526020526fffffffffffffffffffffffffffffffff600160406000200154169083875260036020526001604088200154610bb46fffffffffffffffffffffffffffffffff82169160801c8285613c55565b818110908218021890610bc682613c78565b8589526003602052600160408a200190826fffffffffffffffffffffffffffffffff610bf684549382851661322e565b169116179055610c0582613c78565b85895260036020526040892090826fffffffffffffffffffffffffffffffff610c3284549382851661322e565b169116179055610c61610c4484613c78565b868a5260036020526108e6600160408c200191825460801c61322e565b84885260026020526040882073ffffffffffffffffffffffffffffffffffffffff60a43516600052602052600160406000200190815416905538610a0e565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b95965090610d78670de0b6b3a7640000918887526003602052610d73600160408920015491670ff59ee833b300009081816ec097ce7bc90715b34b9f10000000000410906ec097ce7bc90715b34b9f10000000000482180218916fffffffffffffffffffffffffffffffff8160801c91168a613c0d565b61383b565b04806ec097ce7bc90715b34b9f10000000008102046ec097ce7bc90715b34b9f10000000001481151715610dc757906ec097ce7bc90715b34b9f1000000000610dc1920261384e565b94610809565b6024857f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b90506020813d602011610e7a575b81610e6b60209383612d0f565b810103126102c8575138610617565b3d9150610e5e565b6040513d87823e3d90fd5b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85760ff60406020926004358152600584522054166040519015158152f35b50346101b857610ee936612e16565b849691959296958460a08520808552602096600388526fffffffffffffffffffffffffffffffff98610f288a600260408a200154161515610249613016565b1592610f3e610f356130f9565b82158618612f41565b73ffffffffffffffffffffffffffffffffffffffff809c1693610f62610417613132565b610f6c848a61336e565b6110e757505080855260038752610f8e6040862054898160801c91168b613be8565b975b81865260028852604086208360005288526040600020610fb18a825461316b565b9055610fd8610fbf8a613c78565b83885260038a526108e66040892091825460801c613178565b610fe18a613c78565b828752600389527fffffffffffffffffffffffffffffffff00000000000000000000000000000000604088209261101c845493828516613178565b1691161790556040519089825288888301527fedf8870433c83823eb071d3df1caa8d008f12f6440918c20d75a3602cda30fe060403393a48161107a575b5050508360409561107092511630903390613ab9565b8351928352820152f35b333b156104d2576110bc91839160405193849283927f2075be030000000000000000000000000000000000000000000000000000000084528b6004850161319c565b038183335af180156104d6576110d3575b8061105a565b6110dd8291612cc3565b6101b857806110cd565b61110891999a50828752600389526040872054908b8260801c921690613c55565b98610f90565b50346101b85760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85773ffffffffffffffffffffffffffffffffffffffff604061115d612ca0565b926004358152600260205220911660005260205260606040600020600181549101546040519182526fffffffffffffffffffffffffffffffff8116602083015260801c6040820152f35b50346101b857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b50346101b85760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85761123136612d50565b60a0812090606081019173ffffffffffffffffffffffffffffffffffffffff808451168552602093600485526112a360ff6040882054166040519061127582612cf3565b600f82527f49524d206e6f7420656e61626c6564000000000000000000000000000000000088830152612f41565b6080840180518752600586526112f560ff604089205416604051906112c782612cf3565b601082527f4c4c5456206e6f7420656e61626c65640000000000000000000000000000000089830152612f41565b838752600386526fffffffffffffffffffffffffffffffff61135681600260408b20015416156040519061132882612cf3565b601682527f6d61726b657420616c72656164792063726561746564000000000000000000008a830152612f41565b84885260038752600260408920019042167fffffffffffffffffffffffffffffffff000000000000000000000000000000008254161790556008865260046040882091848751167fffffffffffffffffffffffff0000000000000000000000000000000000000000908185541617845560018401868a8a01511682825416179055600284018660408a015116828254161790556003840190868651169082541617905551910155827fac4b2400f169220b0c0afdde7a0b32e775ba727ea1cb30b35f935cdaab8683ac60a060405161147281896080809173ffffffffffffffffffffffffffffffffffffffff80825116855280602083015116602086015280604083015116604086015260608201511660608501520151910152565ba25116918261147f578480f35b6114c69284928652600383526040862091866040518096819582947f9451fed40000000000000000000000000000000000000000000000000000000084526004840161304f565b03925af18015611504576114db575b80808480f35b813d83116114fd575b6114ee8183612d0f565b810103126102c85738806114d5565b503d6114e4565b6040513d85823e3d90fd5b50346101b8576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85761154936612d50565b60a435611554612c7d565b60e4359073ffffffffffffffffffffffffffffffffffffffff90818316948584036102c8576104bb958760209361164561163d60a0862092838552600388526115ba6fffffffffffffffffffffffffffffffff6002604088200154161515610249613016565b6115cd6115c56132c2565b8c1515612f41565b6115e06115d8613132565b871515612f41565b6115f46115ec82613328565b6102496131e8565b6115fe848861336e565b611636604061160c8d613c78565b9686815260028b5220958a831696876000528a526108e6600160406000200191825460801c61322e565b838761367c565b610249613289565b60408051338152602081018a90527fe80ebd7cc9223d7382aab2e0d1d6155c65651f83d53c8b9b06901d167e3211429190a401511661394a565b50346101b857610100367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc018181126104d25760a0136104e1576040516116c581612cd7565b6116cd612c5a565b81526116d7612ca0565b906020908181019283526044359384151585036102c85760408201948552606082016064358152608435608084019080825260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5c360112611a64576040516117749161174382612cf3565b601182527f7369676e6174757265206578706972656400000000000000000000000000000088830152421115612f41565b8151926117e873ffffffffffffffffffffffffffffffffffffffff94858751168b526007885260408b208054906117aa826132fb565b9055604051916117b983612cf3565b600d83527f696e76616c6964206e6f6e6365000000000000000000000000000000000000008a84015214612f41565b60405191868301907f81d0284fb0e2cde18d0553b06189d6f7613c96a01bb5b5e7828eade6a0dcac918252858751166040850152858951166060850152895115156080850152845160a08501525160c084015260c0835260e083019167ffffffffffffffff9184841083851117611a35578360405284519020908401907f190100000000000000000000000000000000000000000000000000000000000082527fec6ac4ec6469375712b671d38548b711c7a4a17b4db99be41e0eb9f28cafdd2d6101028601526101228501526042835261016084019183831090831117611a35578a92826040525190209060a4359360ff8516809503611a31578894608093835261018082015260c4356101a08201526101c060e43591015282805260015afa15611a26577fd5e969f01efe921d3f766bdebad25f0a05e3f237311f56482bf132d0326309c092829161197f838a51168015159081611a19575b506040519061195182612cf3565b601182527f696e76616c6964207369676e617475726500000000000000000000000000000089830152612f41565b8282511690516040519081527fa58af1a0c70dba0c7aa60d1a1a147ebd61000d1690a968828ac718bca927f2c7873392a3611a0387511515838351168a526006875260408a2084895116600052875260406000209060ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0083541691151516179055565b511693511693511515916040519283523392a480f35b9050848451161438611943565b6040513d88823e3d90fd5b8380fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8880fd5b50346101b8576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104e1576004359067ffffffffffffffff90818311611a315736602384011215611a31578260040135918211611a3157602491600590368482841b87010111611bd057849181611ae58893613823565b95611af36040519788612d0f565b818752611aff82613823565b947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08789019601368737845b838110611b7557505050505060405193838594850191818652518092526040850193925b828110611b5e57505050500390f35b835185528695509381019392810192600101611b4f565b9497959694611b83816132fb565b9084811015611ba457851b82018301355481861b8801529597949695611b2b565b838a7f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b8580fd5b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857604060209173ffffffffffffffffffffffffffffffffffffffff611c26612c5a565b168152600783522054604051908152f35b50346101b85760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857611c6f612c5a565b6040611c79612ca0565b9273ffffffffffffffffffffffffffffffffffffffff80931681526006602052209116600052602052602060ff604060002054166040519015158152f35b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857604060c091600435815260036020522080546002600183015492015490604051926fffffffffffffffffffffffffffffffff91828116855260801c6020850152818116604085015260801c60608401528116608083015260801c60a0820152f35b50346101b857604090611d5a36612e98565b9294939190858260a08520918288526003602052611d946fffffffffffffffffffffffffffffffff60028c8b200154161515610249613016565b1593611daa611da16130f9565b82158718612f41565b73ffffffffffffffffffffffffffffffffffffffff871694611dcd6115d8613132565b611dd96115ec86613328565b611de3848861336e565b611f4e57505092610ac0949273ffffffffffffffffffffffffffffffffffffffff9285899689526003602052611f0e8b611e37818c20546fffffffffffffffffffffffffffffffff8160801c91168b613c33565b9a5b8381526002602052878282209516948560005260205281600020611e5e8d8254613221565b9055611e85611e6c8d613c78565b85835260036020526108e684842091825460801c61322e565b611e8e8a613c78565b8482526003602052828220907fffffffffffffffffffffffffffffffff000000000000000000000000000000006fffffffffffffffffffffffffffffffff611eda84549382851661322e565b1691161790558381526003602052206fffffffffffffffffffffffffffffffff806001830154169154161015610249613250565b8a5133815260208101889052604081018a90527fa56fc0ad5702ec05ce63666221f796fb62437c32db1aa1aa075fc6484cf58fbf90606090a4511661394a565b8998509282611f0e611fa173ffffffffffffffffffffffffffffffffffffffff968b9996610ac09b99969c5260036020528c8a2054906fffffffffffffffffffffffffffffffff8260801c921690613c0d565b9a8b98611e39565b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857611fe1612c5a565b73ffffffffffffffffffffffffffffffffffffffff90612008828454163314610249612f08565b16808252600460205261202560ff60408420541615610249612fdd565b80825260046020526040822060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f590e04cdebeccba40f566186b9746ad295a4cd358ea4fefaaea6ce79630d96c08280a280f35b50346101b85761209036612e98565b909291948294869160a08220958682526003966020968888526fffffffffffffffffffffffffffffffff906120d2826002604088200154161515610249613016565b15936120e86120df6130f9565b8d158718612f41565b73ffffffffffffffffffffffffffffffffffffffff968789169561211561210d613132565b881515612f41565b6121216115ec87613328565b61212b858961336e565b6122e657508a9b5082819b98999a9b528a8a526121566001604083200154838160801c91168a613c33565b9a8b945b61216386613c78565b85845260028d528c8360408620988c8516998a60005283526040600020600101888154958187169061219491613178565b167fffffffffffffffffffffffffffffffff000000000000000000000000000000008096161790556121c590613c78565b91888752526040852060010190815460801c906121e191613178565b81546fffffffffffffffffffffffffffffffff1660809190911b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000161790558c8361222b8d613c78565b91888752526040852060010191868354928184169061224991613178565b16911617905561225a90858961367c565b612262613289565b61226b91612f41565b8382528a526040902090806001830154169154161015612289613250565b61229291612f41565b60408051338152602081018890529081018a90527f570954540bed6b1304a87dfe815a5eda4a648f7097a16240dcd85c9b5fd42a4390606090a45116916122d89261394a565b604051928352820152604090f35b9a5061230d8b9498999a9c8483528d8c52600160408420015490848260801c921690613c0d565b9b8c9861215a565b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b8577f297b80e7a896fad470c630f6575072d609bde997260ff3db851939405ec29139602060043561239073ffffffffffffffffffffffffffffffffffffffff8554163314610249612f08565b808452600582526123ab60ff60408620541615610249612fdd565b6123f36040516123ba81612cf3565b601181527f6d6178204c4c545620657863656564656400000000000000000000000000000084820152670de0b6b3a76400008310612f41565b808452600582526040842060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055604051908152a180f35b50346101b857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b50346101b857807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85760206040517fec6ac4ec6469375712b671d38548b711c7a4a17b4db99be41e0eb9f28cafdd2d8152f35b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857604060a091600435815260086020522073ffffffffffffffffffffffffffffffffffffffff8082541691816001820154169160048160028401541691600384015416920154926040519485526020850152604084015260608301526080820152f35b50346101b85760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b8576125a736612d50565b7f139d6f58e9a127229667c8e3b36e88890a66cfc8ab1024ddc513e189e125b75b602060a4356125f273ffffffffffffffffffffffffffffffffffffffff8654163314610249612f08565b6126ed60a08520948587526003845261269c866fffffffffffffffffffffffffffffffff9261262e84600260408d200154161515610249613016565b818a526003875261264e600260408c20015460801c871415610249612fdd565b61269760405161265d81612cf3565b601081527f6d61782066656520657863656564656400000000000000000000000000000000898201526703782dace9d90000881115612f41565b61336e565b85875260038452821660026040882001906fffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffff0000000000000000000000000000000083549260801b169116179055565b604051908152a280f35b50346101b8576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85761273136612d50565b9060a43561273d612c7d565b60e43567ffffffffffffffff8111611a315761275d903690600401612de8565b9060a0862080865260036020526127916fffffffffffffffffffffffffffffffff6002604089200154161515610249613016565b61279c6104176132c2565b73ffffffffffffffffffffffffffffffffffffffff809416906127c86127c0613132565b831515612f41565b6127fb6127d487613c78565b828952600260205260408920848a526020526108e6600160408b200191825460801c613178565b604051908682527fa3b9472a1399e17e123f3c2e6586c23e504184d504de59cdaa2b375e880c618460203393a481612843575b505060206104bb939401511630903390613ab9565b333b156128bd5761288591859160405193849283927fb1022fdf000000000000000000000000000000000000000000000000000000008452886004850161319c565b038183335af180156128b25761289c575b8061282e565b6104bb936128ab602092612cc3565b9350612896565b6040513d86823e3d90fd5b8480fd5b50346101b8576128d036612e16565b849691959296958460a0852080855260036020978189526fffffffffffffffffffffffffffffffff996129108b600260408b200154161515610249613016565b159361291d611da16130f9565b73ffffffffffffffffffffffffffffffffffffffff809d16946129416115d8613132565b61294b858b61336e565b612af757505081865280885261296f60016040882001548a8160801c91168c613be8565b985b61297a8a613c78565b9083885260028a52604088208589528a5260016040892001816129a182549482861661322e565b167fffffffffffffffffffffffffffffffff000000000000000000000000000000008094161790556129f06129d58c613c78565b858a52848c526108e6600160408c200191825460801c61322e565b838852828a52612a0f81600160408b200154168d808203911102613c78565b928489528a52600160408920019216908254161790556040519089825288888301527f52acb05cebbd3cd39715469f22afbf5a17496295ef3bc9bb5944056c63ccaa0960403393a481612a72575050508360409561107092511630903390613ab9565b333b156104d257918091612ab59360405194859283927f05b4591c0000000000000000000000000000000000000000000000000000000084528b6004850161319c565b038183335af1908115612aeb575095611070928692604098612adc575b509281975061105a565b612ae590612cc3565b38612ad2565b604051903d90823e3d90fd5b612b1a919a9b50838852828a526001604089200154908c8260801c921690613c55565b99612971565b50346101b85760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b8576104bb612b5c36612d50565b60a081209081845260036020526126976fffffffffffffffffffffffffffffffff6002604087200154161515610249613016565b50346101b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b857612c2f612bcb612c5a565b7fffffffffffffffffffffffff0000000000000000000000000000000000000000835473ffffffffffffffffffffffffffffffffffffffff80821693612c1a612c12612f08565b863314612f41565b16938493612c26612fdd565b90851415612f41565b161782557f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb58280a280f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102c857565b60c4359073ffffffffffffffffffffffffffffffffffffffff821682036102c857565b6024359073ffffffffffffffffffffffffffffffffffffffff821682036102c857565b67ffffffffffffffff8111611a3557604052565b60a0810190811067ffffffffffffffff821117611a3557604052565b6040810190811067ffffffffffffffff821117611a3557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611a3557604052565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126102c85760405190612d8782612cd7565b8173ffffffffffffffffffffffffffffffffffffffff60043581811681036102c857825260243581811681036102c857602083015260443581811681036102c857604083015260643590811681036102c85760608201526080608435910152565b9181601f840112156102c85782359167ffffffffffffffff83116102c857602083818601950101116102c857565b6101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102c857612e4a81612d50565b9160a4359160c4359160e43573ffffffffffffffffffffffffffffffffffffffff811681036102c85791610104359067ffffffffffffffff82116102c857612e9491600401612de8565b9091565b6101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102c857612ecc90612d50565b9060a4359060c4359073ffffffffffffffffffffffffffffffffffffffff9060e43582811681036102c857916101043590811681036102c85790565b60405190612f1582612cf3565b600982527f6e6f74206f776e657200000000000000000000000000000000000000000000006020830152565b15612f495750565b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110612fc6575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201612f85565b60405190612fea82612cf3565b600b82527f616c7265616479207365740000000000000000000000000000000000000000006020830152565b6040519061302382612cf3565b601282527f6d61726b6574206e6f74206372656174656400000000000000000000000000006020830152565b909291610140906130a9836101608101966080809173ffffffffffffffffffffffffffffffffffffffff80825116855280602083015116602086015280604083015116604086015260608201511660608501520151910152565b60028154916fffffffffffffffffffffffffffffffff9283811660a087015260801c60c0860152600181015483811660e087015260801c610100860152015490811661012084015260801c910152565b6040519061310682612cf3565b601282527f696e636f6e73697374656e7420696e70757400000000000000000000000000006020830152565b6040519061313f82612cf3565b600c82527f7a65726f206164647265737300000000000000000000000000000000000000006020830152565b91908201809211610ccd57565b9190916fffffffffffffffffffffffffffffffff80809416911601918211610ccd57565b9183606094601f927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0948652604060208701528160408701528686013760008582860101520116010190565b604051906131f582612cf3565b600c82527f756e617574686f72697a656400000000000000000000000000000000000000006020830152565b91908203918211610ccd57565b6fffffffffffffffffffffffffffffffff9182169082160391908211610ccd57565b6040519061325d82612cf3565b601682527f696e73756666696369656e74206c6971756964697479000000000000000000006020830152565b6040519061329682612cf3565b601782527f696e73756666696369656e7420636f6c6c61746572616c0000000000000000006020830152565b604051906132cf82612cf3565b600b82527f7a65726f206173736574730000000000000000000000000000000000000000006020830152565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ccd5760010190565b73ffffffffffffffffffffffffffffffffffffffff1680331490811561334c575090565b9050600052600660205260406000203360005260205260ff6040600020541690565b91906000908082526003916020928084526fffffffffffffffffffffffffffffffff936040936133a686600287872001541642613221565b80156136715773ffffffffffffffffffffffffffffffffffffffff908160608b01511680613409575b50505060029596975083525220019042167fffffffffffffffffffffffffffffffff00000000000000000000000000000000825416179055565b61344d8591858952878352898920898b519e8f94859384927f9451fed40000000000000000000000000000000000000000000000000000000084526004840161304f565b03925af1998a1561366757869a613637575b50606088999a6134f087898796898860029f8f7f9d9bd501d0657d7dfe415f779a620a62b78bc508ddc0891fbbd8b7ac0f8fce879a8387528785526134fb6134b0846001858b20015416928c61383b565b916134f5671bc16d674ec800006134c7858061383b565b0493670de0b6b3a76400009c856729a2241af62c00008f97846134e99161383b565b049261316b565b61316b565b9061383b565b049561350687613c78565b84825288865260018383200184613521825493828516613178565b167fffffffffffffffffffffffffffffffff0000000000000000000000000000000080931617905561355288613c78565b858352898752838320918561356b845493828516613178565b16911617905580978482528086526002838320015460801c998a6135aa575b505090519889525050505050888401528a83015250a287969538806133cf565b8899506135bf6135ce97989b6135e19a61383b565b04968795835252205416613221565b888d528b8b528d8d205460801c91613be8565b91868b528c89528b8b2090600154168b5288528a8a2061360283825461316b565b905561362761361083613c78565b878c528a8a526108e68d8d2091825460801c613178565b819038898f89908f8f8f8661358a565b9099508381813d8311613660575b61364f8183612d0f565b81010312611bd0575198606061345f565b503d613645565b87513d88823e3d90fd5b505050505050509050565b909291600093808552602092600284526040862073ffffffffffffffffffffffffffffffffffffffff90818516885285526fffffffffffffffffffffffffffffffff600160408920015416156137625784600491604084015116604051928380927fa035b1fe0000000000000000000000000000000000000000000000000000000082525afa948515613757578795613720575b505061371d94955061376d565b90565b9080929550813d8311613750575b6137388183612d0f565b81010312611bd05761371d9495505192859438613710565b503d61372e565b6040513d89823e3d90fd5b506001955050505050565b60806ec097ce7bc90715b34b9f100000000061381361381d949660016040670de0b6b3a7640000986000908b8252600260205273ffffffffffffffffffffffffffffffffffffffff8383209116908183526020526137f86fffffffffffffffffffffffffffffffff8d8187878720015416908552600360205286868620015491828c1c921690613c55565b9b82526002602052828220908252602052200154841c61383b565b049101519061383b565b04101590565b67ffffffffffffffff8111611a355760051b60200190565b81810292918115918404141715610ccd57565b8115610df4570490565b906138629161383b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810191818311610ccd5761371d926107d49161316b565b604051906138a882612cf3565b600782527f6e6f20636f6465000000000000000000000000000000000000000000000000006020830152565b3d1561392d573d9067ffffffffffffffff8211611a35576040519161392160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612d0f565b82523d6000602084013e565b606090565b908160209103126102c8575180151581036102c85790565b613a9d92600092836139da613a0673ffffffffffffffffffffffffffffffffffffffff83961694613980863b151561024961389b565b60405192839160208301967fa9059cbb000000000000000000000000000000000000000000000000000000008852602484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612d0f565b51925af1613a52613a156138d4565b9160405190613a2382612cf3565b601182527f7472616e736665722072657665727465640000000000000000000000000000006020830152612f41565b8051908115918215613a9f575b505060405190613a6e82612cf3565b601782527f7472616e736665722072657475726e65642066616c73650000000000000000006020830152612f41565b565b613ab29250602080918301019101613932565b3880613a5f565b60009291838093613a9d9673ffffffffffffffffffffffffffffffffffffffff80951694613aec863b151561024961389b565b604051928160208501967f23b872dd000000000000000000000000000000000000000000000000000000008852166024850152166044830152606482015260648152613b3781612cd7565b51925af1613b83613b466138d4565b9160405190613b5482612cf3565b601582527f7472616e7366657246726f6d20726576657274656400000000000000000000006020830152612f41565b8051908115918215613bce575b505060405190613b9f82612cf3565b601b82527f7472616e7366657246726f6d2072657475726e65642066616c736500000000006020830152612f41565b613be19250602080918301019101613932565b3880613b90565b620f42408301809311610ccd5760018201809211610ccd5761371d926107d49161383b565b6001820192918310610ccd57620f42408201809211610ccd5761371d926107d49161383b565b91620f42408101809111610ccd5760018201809211610ccd5761371d92613858565b919060018101809111610ccd57620f42408201809211610ccd5761371d92613858565b60405190613c8582612cf3565b601482527f6d61782075696e743132382065786365656465640000000000000000000000006020830152613ccd6fffffffffffffffffffffffffffffffff9283831115612f41565b169056fea264697066735822122079158eb535c7c15b41fefd9a35ecfba352cc57513680ee925005a5e78d70326264736f6c63430008130033";

    address internal constant BRIDGE_MANAGER = 0x165BD6204Df6A4C47875D62582dc7C1Ed6477c17;
    address constant LXLY_BRIDGE_X = 0x1348947e282138d8f377b467F7D9c2EB0F335d1f;
    address constant LXLY_BRIDGE_Y = 0x528e26b25a34a4A5d0dbDa1d57D318153d2ED582;
    address constant GER_X = 0x2968D6d736178f8FE7393CC33C87f29D9C287e78;
    address constant GER_Y = 0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA;
    address constant GER_Y_UPDATER = 0x7d8EB43E982b1aAb2b0cd1084EeF80345D3f92d8;
    address constant ROLLUP_MANAGER = 0xE2EF6215aDc132Df6913C8DD16487aBF118d1764;
    uint8 constant LEAF_TYPE_ASSET = 0;
    uint8 constant LEAF_TYPE_MESSAGE = 1;
    address internal constant METAMORPHO_FACTORY = 0x1897A8997241C1cD4bD0698647e4EB7213535c24;
    address internal constant MORPHO = 0xBBBBBbbBBb9cC5e90e3b3Af64bdAF62C37EEFFCb;
    uint32 constant NETWORK_ID_X = 0; // mainnet/sepolia
    uint32 constant NETWORK_ID_Y = 29; // katana-apex
    bytes32 constant PERMIT_TYPEHASH =
        keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
    bytes4 constant PERMIT_SIGNATURE = 0xd505accf;

    // extra contracts
    IMetaMorpho yeTokenVault;
    MockNativeConverter nativeConverter;
    YieldExposedToken.NativeConverter[] nativeConverterStruct;

    // dummy addresses
    address recipient = makeAddr("recipient");
    address owner = makeAddr("owner");
    address yieldRecipient = makeAddr("yieldRecipient");
    address migrator = makeAddr("migrator");
    uint256 senderPrivateKey = 0xBEEF;
    address sender = vm.addr(senderPrivateKey);

    // underlying asset
    UnderlyingAsset underlyingAsset;
    string internal constant UNDERLYING_ASSET_NAME = "Underlying Asset";
    string internal constant UNDERLYING_ASSET_SYMBOL = "UAT";
    uint8 internal constant UNDERLYING_ASSET_DECIMALS = 18;
    bytes underlyingAssetMetaData =
        abi.encode(UNDERLYING_ASSET_NAME, UNDERLYING_ASSET_SYMBOL, UNDERLYING_ASSET_DECIMALS);

    // bridge wrapped underlying asset
    UnderlyingAsset bwUnderlyingAsset;
    string internal constant BW_UNDERLYING_ASSET_NAME = "Bridge Wrapped Underlying Asset";
    string internal constant BW_UNDERLYING_ASSET_SYMBOL = "BWUAT";
    uint8 internal constant BW_UNDERLYING_ASSET_DECIMALS = 18;
    bytes bwUnderlyingAssetMetaData = abi.encode("", "", 18);

    // yeToken
    MockYeToken yeToken;
    uint256 internal constant MINIMUM_RESERVE_PERCENTAGE = 1e17;
    string internal constant YETOKEN_NAME = "Yield Exposed Token";
    string internal constant YETOKEN_SYMBOL = "YETK";
    uint8 internal constant YETOKEN_DECIMALS = 18;
    bytes yeTokenMetaData = abi.encode(YETOKEN_NAME, YETOKEN_SYMBOL, YETOKEN_DECIMALS);

    // custom token
    MockCustomToken customToken;
    string internal constant CUSTOM_TOKEN_NAME = "Custom Token";
    string internal constant CUSTOM_TOKEN_SYMBOL = "CT";
    uint8 internal constant CUSTOM_TOKEN_DECIMALS = 18;
    bytes customTokenMetaData = abi.encode(CUSTOM_TOKEN_NAME, CUSTOM_TOKEN_SYMBOL, CUSTOM_TOKEN_DECIMALS);

    // bridge wrapped yeToken
    TokenWrapped bwYeToken;
    string internal constant BW_YETOKEN_NAME = "Bridge Wrapped YeToken";
    string internal constant BW_YETOKEN_SYMBOL = "BWYETK";
    uint8 internal constant BW_YETOKEN_DECIMALS = 18;
    bytes bwYeTokenMetaData = abi.encode("", "", 18);

    uint256 forkIdLayerX;
    uint256 forkIdLayerY;

    // error messages
    error EnforcedPause();

    // events
    event BridgeEvent(
        uint8 leafType,
        uint32 originNetwork,
        address originAddress,
        uint32 destinationNetwork,
        address destinationAddress,
        uint256 amount,
        bytes metadata,
        uint32 depositCount
    );
    event ClaimEvent(
        uint256 globalIndex, uint32 originNetwork, address originAddress, address destinationAddress, uint256 amount
    );
    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);
    event ReserveRebalanced(uint256 reservedAssets);
    event YieldCollected(address indexed yieldRecipient, uint256 yeTokenAmount);
    event YieldRecipientChanged(address indexed yieldRecipient);
    event MinimumReservePercentageChanged(uint8 minimumReservePercentage);
    event MigrationCompleted(
        uint32 indexed destinationNetworkId,
        uint256 indexed shares,
        uint256 assetsBeforeTransferFee,
        uint256 assets,
        uint256 usedYield
    );

    function setUp() public virtual {
        //////////////////////////////////////////////////////////////
        // Layer X
        //////////////////////////////////////////////////////////////
        forkIdLayerX = vm.createSelectFork("sepolia", 7677345);

        // deploy underlying asset
        underlyingAsset = new UnderlyingAsset(UNDERLYING_ASSET_NAME, UNDERLYING_ASSET_SYMBOL);

        // deploy vault
        vm.etch(MORPHO, MORPHO_BYTECODE);
        vm.etch(METAMORPHO_FACTORY, METAMORPHO_FACTORY_BYTECODE);
        yeTokenVault = IMetaMorpho(
            IMetaMorphoV1_1Factory(METAMORPHO_FACTORY).createMetaMorpho(
                owner, 0, address(underlyingAsset), "YeToken vault", "vYETOKEN", ""
            )
        );

        // calculate native converter address
        uint256 nativeConverterNonce = vm.getNonce(address(this)) + 5;
        address nativeConverterAddr = vm.computeCreateAddress(address(this), nativeConverterNonce);

        nativeConverterStruct.push(
            YieldExposedToken.NativeConverter({layerYLxlyId: NETWORK_ID_Y, nativeConverter: nativeConverterAddr})
        );

        // deploy yeToken
        yeToken = new MockYeToken();
        bytes memory yeTokenInitData = abi.encodeCall(
            yeToken.initialize,
            (
                owner,
                YETOKEN_NAME,
                YETOKEN_SYMBOL,
                address(underlyingAsset),
                MINIMUM_RESERVE_PERCENTAGE,
                address(yeTokenVault),
                yieldRecipient,
                LXLY_BRIDGE_X,
                nativeConverterStruct
            )
        );
        yeToken = MockYeToken(_proxify(address(yeToken), address(this), yeTokenInitData));

        //////////////////////////////////////////////////////////////
        // Switch to Layer Y
        //////////////////////////////////////////////////////////////
        forkIdLayerY = vm.createSelectFork("tatara");

        // deploy custom token
        customToken = new MockCustomToken();
        bytes memory customTokenInitData = abi.encodeCall(
            MockCustomToken(customToken).initialize,
            (owner, CUSTOM_TOKEN_NAME, CUSTOM_TOKEN_SYMBOL, CUSTOM_TOKEN_DECIMALS, LXLY_BRIDGE_Y, nativeConverterAddr)
        );
        customToken = MockCustomToken(_proxify(address(customToken), address(this), customTokenInitData));

        // calculate bridge wrapped yeToken address
        bwYeToken = TokenWrapped(
            _ILxLyBridge(LXLY_BRIDGE_Y).precalculatedWrapperAddress(
                NETWORK_ID_X, address(yeToken), YETOKEN_NAME, YETOKEN_SYMBOL, YETOKEN_DECIMALS
            )
        );

        // deploy underlying token (note: normally we don't have to do this manually and this should be done automatically by bridging yeToken on Layer X)
        vm.prank(LXLY_BRIDGE_Y);
        ERC20 tempBwYeToken = new TokenWrapped(BW_YETOKEN_NAME, BW_YETOKEN_SYMBOL, BW_YETOKEN_DECIMALS);
        vm.etch(address(bwYeToken), address(tempBwYeToken).code);

        // calculate bridge wrapped underlying asset address
        bwUnderlyingAsset = UnderlyingAsset(
            _ILxLyBridge(LXLY_BRIDGE_Y).precalculatedWrapperAddress(
                NETWORK_ID_X,
                address(underlyingAsset),
                UNDERLYING_ASSET_NAME,
                UNDERLYING_ASSET_SYMBOL,
                UNDERLYING_ASSET_DECIMALS
            )
        );

        // deploy the bridge wrapped underlying asset (note: normally we don't have to do this manually and this should be done automatically by bridging underlying asset on Layer X)
        vm.prank(LXLY_BRIDGE_Y);
        ERC20 tempBwUnderlyingAsset =
            new TokenWrapped(BW_UNDERLYING_ASSET_NAME, BW_UNDERLYING_ASSET_SYMBOL, BW_UNDERLYING_ASSET_DECIMALS);
        vm.etch(address(bwUnderlyingAsset), address(tempBwUnderlyingAsset).code);

        // deploy native converter
        nativeConverter = new MockNativeConverter();
        bytes memory nativeConverterInitData = abi.encodeCall(
            MockNativeConverter(nativeConverter).initialize,
            (
                owner,
                YETOKEN_DECIMALS,
                address(customToken),
                address(bwUnderlyingAsset),
                LXLY_BRIDGE_Y,
                NETWORK_ID_X,
                address(yeToken),
                migrator
            )
        );
        nativeConverter =
            MockNativeConverter(_proxify(address(nativeConverter), address(this), nativeConverterInitData));
        assertEq(nativeConverterAddr, address(nativeConverter));

        //////////////////////////////////////////////////////////////
        // Layer X
        //////////////////////////////////////////////////////////////
        vm.selectFork(forkIdLayerX);

        vm.label(BRIDGE_MANAGER, "Bridge Manager");
        vm.label(address(customToken), "Custom Token");
        vm.label(address(this), "Default Address");
        vm.label(GER_X, "GlobalExitRoot Layer X");
        vm.label(GER_Y, "GlobalExitRoot Layer Y");
        vm.label(LXLY_BRIDGE_X, "Lxly Bridge X");
        vm.label(LXLY_BRIDGE_Y, "Lxly Bridge Y");
        vm.label(address(nativeConverter), "Native Converter");
        vm.label(address(owner), "Owner");
        vm.label(address(recipient), "Recipient");
        vm.label(address(sender), "Sender");
        vm.label(address(underlyingAsset), "Underlying Asset");
        vm.label(address(bwUnderlyingAsset), "Bridge Wrapped Underlying Asset");
        vm.label(address(bwYeToken), "Underlying Wrapped Asset");
        vm.label(address(yeToken), "yeToken");
        vm.label(address(yeTokenVault), "yeToken Vault");
        vm.label(address(yieldRecipient), "Yield Recipient");
    }

    function test_depositAndBridge_bridgeWrappedMapping() public {
        uint256 depositAmount = 100;

        LeafPayload memory depositLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(yeToken),
            destinationNetwork: NETWORK_ID_Y,
            destinationAddress: recipient,
            amount: depositAmount,
            metadata: yeTokenMetaData
        });

        vm.selectFork(forkIdLayerX);

        deal(address(underlyingAsset), sender, depositAmount); // fund sender
        _depositAndBridgeLayerX(sender, depositAmount, depositLeaf);

        bytes32 lastLayerXExitRoot = IPolygonZkEVMGlobalExitRoot(GER_X).lastMainnetExitRoot();
        ClaimPayload memory claimPayload = _getClaimPayloadLayerX(depositLeaf, lastLayerXExitRoot);

        vm.selectFork(forkIdLayerY);

        // map the bridge wrapped yeToken to the yeToken (simulating the natural bridging process, no need in real life)
        _mapTokenLayerYToLayerX(address(yeToken), address(bwYeToken), false);
        _claimAndVerifyAssetLayerY(bwYeToken, claimPayload);
    }

    function test_depositAndBridge_customTokenMapping() public {
        uint256 depositAmount = 100;

        LeafPayload memory leaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(yeToken),
            destinationNetwork: NETWORK_ID_Y,
            destinationAddress: recipient,
            amount: depositAmount,
            metadata: yeTokenMetaData
        });

        vm.selectFork(forkIdLayerX);

        deal(address(underlyingAsset), sender, depositAmount); // fund sender
        _depositAndBridgeLayerX(sender, depositAmount, leaf);

        bytes32 lastLayerXExitRoot = IPolygonZkEVMGlobalExitRoot(GER_X).lastMainnetExitRoot();
        ClaimPayload memory claimPayload = _getClaimPayloadLayerX(leaf, lastLayerXExitRoot);

        vm.selectFork(forkIdLayerY);

        // map the custom token to the yeToken
        _mapTokenLayerYToLayerX(address(yeToken), address(customToken), false);
        _claimAndVerifyAssetLayerY(customToken, claimPayload);
    }

    function test_claimAndRedeem_bridgeWrappedMapping() public {
        uint256 depositAmount = 1000;

        vm.selectFork(forkIdLayerX);

        // create backing on the bridge on layer X
        deal(address(underlyingAsset), sender, depositAmount);
        LeafPayload memory depositLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(yeToken),
            destinationNetwork: NETWORK_ID_Y,
            destinationAddress: recipient,
            amount: depositAmount,
            metadata: yeTokenMetaData
        });
        _depositAndBridgeLayerX(sender, depositAmount, depositLeaf);
        bytes32 lastLayerXExitRoot = IPolygonZkEVMGlobalExitRoot(GER_X).lastMainnetExitRoot();

        vm.selectFork(forkIdLayerY);

        uint256 withdrawAmount = 100;

        _mapTokenLayerYToLayerX(address(yeToken), address(bwYeToken), false); // map the bridge wrapped yeToken to the yeToken (simulating the natural bridging process, no need in real life)
        deal(address(bwYeToken), sender, withdrawAmount);

        vm.startPrank(sender);
        bwYeToken.approve(LXLY_BRIDGE_Y, withdrawAmount);

        LeafPayload memory withdrawLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(yeToken),
            destinationNetwork: NETWORK_ID_X,
            destinationAddress: address(yeToken),
            amount: withdrawAmount,
            metadata: bwYeTokenMetaData
        });

        // bridge the bridge wrapped yeToken
        vm.expectEmit();
        emit BridgeEvent(
            withdrawLeaf.leafType,
            withdrawLeaf.originNetwork,
            withdrawLeaf.originAddress,
            withdrawLeaf.destinationNetwork,
            withdrawLeaf.destinationAddress,
            withdrawLeaf.amount,
            withdrawLeaf.metadata,
            _ILxLyBridge(LXLY_BRIDGE_Y).depositCount()
        );
        ILxLyBridge(LXLY_BRIDGE_Y).bridgeAsset(
            NETWORK_ID_X, address(yeToken), withdrawAmount, address(bwYeToken), true, ""
        );

        assertEq(bwYeToken.balanceOf(LXLY_BRIDGE_Y), 0); // underlying asset is burned as it is custom mapped to yeToken
        vm.stopPrank();

        LeafPayload[] memory leafPayloads = new LeafPayload[](1);
        leafPayloads[0] = withdrawLeaf;
        ClaimPayload[] memory withdrawClaimPayload = _getClaimPayloadsLayerY(leafPayloads, lastLayerXExitRoot);

        vm.selectFork(forkIdLayerX);

        _claimAndRedeemLayerXAndVerify(withdrawClaimPayload[0]);
    }

    // Add test for not being able to withdraw the needed amount from external vault
    // Add another test where vault maxWithdraw works
    function test_claimAndRedeem_customTokenMapping() public {
        uint256 depositAmount = 1000;

        vm.selectFork(forkIdLayerX);

        // create backing on the bridge on layer X
        deal(address(underlyingAsset), sender, depositAmount);
        LeafPayload memory depositLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(yeToken),
            destinationNetwork: NETWORK_ID_Y,
            destinationAddress: recipient,
            amount: depositAmount,
            metadata: yeTokenMetaData
        });
        _depositAndBridgeLayerX(sender, depositAmount, depositLeaf);
        bytes32 lastLayerXExitRoot = IPolygonZkEVMGlobalExitRoot(GER_X).lastMainnetExitRoot();

        vm.selectFork(forkIdLayerY);

        uint256 withdrawAmount = 100;

        _mapTokenLayerYToLayerX(address(yeToken), address(customToken), false);
        deal(address(customToken), sender, withdrawAmount);

        vm.startPrank(sender);
        customToken.approve(LXLY_BRIDGE_Y, withdrawAmount);

        // make the withdrawal leaf
        LeafPayload memory withdrawLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(yeToken),
            destinationNetwork: NETWORK_ID_X,
            destinationAddress: address(yeToken),
            amount: withdrawAmount,
            metadata: customTokenMetaData
        });

        // bridge the custom token
        vm.expectEmit();
        emit BridgeEvent(
            withdrawLeaf.leafType,
            withdrawLeaf.originNetwork,
            withdrawLeaf.originAddress,
            withdrawLeaf.destinationNetwork,
            withdrawLeaf.destinationAddress,
            withdrawLeaf.amount,
            withdrawLeaf.metadata,
            _ILxLyBridge(LXLY_BRIDGE_Y).depositCount()
        );
        ILxLyBridge(LXLY_BRIDGE_Y).bridgeAsset(
            NETWORK_ID_X, address(yeToken), withdrawAmount, address(customToken), true, ""
        );
        assertEq(customToken.balanceOf(LXLY_BRIDGE_Y), 0); // custom token is burned as it is custom mapped to yeToken
        vm.stopPrank();

        LeafPayload[] memory leafPayloads = new LeafPayload[](1);
        leafPayloads[0] = withdrawLeaf;
        ClaimPayload[] memory withdrawClaimPayload = _getClaimPayloadsLayerY(leafPayloads, lastLayerXExitRoot);

        vm.selectFork(forkIdLayerX);

        _claimAndRedeemLayerXAndVerify(withdrawClaimPayload[0]);
    }

    function test_deconvertAndBridge_bridgeWrappedMapping() public {
        uint256 amount = 100;

        vm.selectFork(forkIdLayerX);

        // create liquidity on the bridge on layer X
        deal(address(underlyingAsset), LXLY_BRIDGE_X, amount);
        bytes32 lastLayerXExitRoot = IPolygonZkEVMGlobalExitRoot(GER_X).lastMainnetExitRoot();

        vm.selectFork(forkIdLayerY);

        // create backing on layer Y
        uint256 backingOnLayerY = 0;
        uint256 convertAmount = 100;
        deal(address(bwUnderlyingAsset), owner, convertAmount);
        vm.startPrank(owner);
        bwUnderlyingAsset.approve(address(nativeConverter), convertAmount);
        backingOnLayerY = nativeConverter.convert(convertAmount, recipient);
        vm.stopPrank();

        _mapTokenLayerYToLayerX(address(yeToken), address(customToken), false);
        _mapTokenLayerYToLayerX(address(underlyingAsset), address(bwUnderlyingAsset), false);

        deal(address(customToken), sender, convertAmount);

        LeafPayload memory withdrawLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(underlyingAsset),
            destinationNetwork: NETWORK_ID_X,
            destinationAddress: recipient,
            amount: convertAmount,
            metadata: bwUnderlyingAssetMetaData // since we deconvert the custom token to the underlying token we'll bridge the underlying token
        });
        _deconvertAndBridgeLayerY(sender, convertAmount, withdrawLeaf);

        LeafPayload[] memory leafPayloads = new LeafPayload[](1);
        leafPayloads[0] = withdrawLeaf;
        ClaimPayload[] memory withdrawClaimPayload = _getClaimPayloadsLayerY(leafPayloads, lastLayerXExitRoot);

        vm.selectFork(forkIdLayerX);
        _claimAndVerifyAssetLayerX(underlyingAsset, withdrawClaimPayload[0]);
    }

    function test_migrateBackingToLayerX() public {
        uint256 amount = 100;

        uint256 yeTokenTotalSupplyBefore = yeToken.totalSupply();

        // switch to Layer X
        vm.selectFork(forkIdLayerX);

        // create liquidity on the bridge on layer X
        deal(address(underlyingAsset), LXLY_BRIDGE_X, amount);
        bytes32 lastLayerXExitRoot = IPolygonZkEVMGlobalExitRoot(GER_X).lastMainnetExitRoot();

        vm.selectFork(forkIdLayerY);

        // create backing on layer Y
        uint256 backingOnLayerY = 0;
        uint256 convertAmount = 100;
        deal(address(bwUnderlyingAsset), owner, convertAmount);
        vm.startPrank(owner);
        bwUnderlyingAsset.approve(address(nativeConverter), convertAmount);
        backingOnLayerY = nativeConverter.convert(convertAmount, recipient);
        vm.stopPrank();

        _mapTokenLayerYToLayerX(address(yeToken), address(customToken), false);
        _mapTokenLayerYToLayerX(address(underlyingAsset), address(bwUnderlyingAsset), false);

        // make the migration leaves
        LeafPayload memory assetLeaf = LeafPayload({
            leafType: LEAF_TYPE_ASSET,
            originNetwork: NETWORK_ID_X,
            originAddress: address(underlyingAsset),
            destinationNetwork: NETWORK_ID_X,
            destinationAddress: address(yeToken),
            amount: backingOnLayerY,
            metadata: bwYeTokenMetaData
        });

        LeafPayload memory messageLeaf = LeafPayload({
            leafType: LEAF_TYPE_MESSAGE,
            originNetwork: NETWORK_ID_Y,
            originAddress: address(nativeConverter),
            destinationNetwork: NETWORK_ID_X,
            destinationAddress: address(yeToken),
            amount: 0,
            metadata: abi.encode(
                NativeConverter.CrossNetworkInstruction.COMPLETE_MIGRATION, abi.encode(backingOnLayerY, backingOnLayerY)
            )
        });

        // migrate backing to Layer X
        vm.expectEmit();
        emit BridgeEvent(
            assetLeaf.leafType,
            assetLeaf.originNetwork,
            assetLeaf.originAddress,
            assetLeaf.destinationNetwork,
            assetLeaf.destinationAddress,
            assetLeaf.amount,
            assetLeaf.metadata,
            _ILxLyBridge(LXLY_BRIDGE_Y).depositCount()
        );
        vm.expectEmit();
        emit BridgeEvent(
            messageLeaf.leafType,
            messageLeaf.originNetwork,
            messageLeaf.originAddress,
            messageLeaf.destinationNetwork,
            messageLeaf.destinationAddress,
            messageLeaf.amount,
            messageLeaf.metadata,
            _ILxLyBridge(LXLY_BRIDGE_Y).depositCount() + 1
        );
        vm.expectEmit();
        emit NativeConverter.MigrationStarted(migrator, backingOnLayerY, backingOnLayerY);
        vm.prank(migrator);
        nativeConverter.migrateBackingToLayerX(backingOnLayerY);

        LeafPayload[] memory leafPayloads = new LeafPayload[](2);
        leafPayloads[0] = assetLeaf;
        leafPayloads[1] = messageLeaf;
        ClaimPayload[] memory claimPayloads = _getClaimPayloadsLayerY(leafPayloads, lastLayerXExitRoot);

        // switch to Layer X
        vm.selectFork(forkIdLayerX);

        // claim and withdraw on Layer X
        _claimAndVerifyAssetLayerX(underlyingAsset, claimPayloads[0]);
        _claimMessageLayerX(claimPayloads[1]);

        uint256 yeTokenTotalSupplyAfter = yeToken.totalSupply();
        assertGt(yeTokenTotalSupplyAfter, yeTokenTotalSupplyBefore);
    }

    function _depositAndBridgeLayerX(address _sender, uint256 _amount, LeafPayload memory _leaf) internal {
        // make sure we are on Layer X
        assertEq(vm.activeFork(), forkIdLayerX);

        vm.startPrank(_sender);

        // approve underlying asset
        yeToken.underlyingToken().approve(address(yeToken), _amount);

        // deposit and bridge
        vm.expectEmit();
        emit BridgeEvent(
            _leaf.leafType,
            _leaf.originNetwork,
            _leaf.originAddress,
            _leaf.destinationNetwork,
            _leaf.destinationAddress,
            _leaf.amount,
            _leaf.metadata,
            _ILxLyBridge(LXLY_BRIDGE_X).depositCount()
        );
        yeToken.depositAndBridge(_amount, _leaf.destinationAddress, _leaf.destinationNetwork, true);

        vm.stopPrank();

        // assert balances
        vm.assertEq(yeToken.underlyingToken().balanceOf(_sender), 0);
        vm.assertEq(yeToken.balanceOf(LXLY_BRIDGE_X), _amount); // shares locked in the bridge
    }

    function _mapTokenLayerYToLayerX(address _originTokenAddress, address _sovereignTokenAddress, bool _isNotMintable)
        internal
    {
        // make sure we are on Layer Y
        assertEq(vm.activeFork(), forkIdLayerY);

        uint32[] memory originNetworks = new uint32[](1);
        originNetworks[0] = NETWORK_ID_X;
        address[] memory originTokenAddresses = new address[](1);
        originTokenAddresses[0] = _originTokenAddress;
        address[] memory sovereignTokenAddresses = new address[](1);
        sovereignTokenAddresses[0] = _sovereignTokenAddress;
        bool[] memory isNotMintable = new bool[](1);
        isNotMintable[0] = _isNotMintable;

        vm.prank(BRIDGE_MANAGER);
        IBridgeL2SovereignChain(LXLY_BRIDGE_Y).setMultipleSovereignTokenAddress(
            originNetworks, originTokenAddresses, sovereignTokenAddresses, isNotMintable
        );
    }

    function _getClaimPayloadLayerX(LeafPayload memory _leaf, bytes32 lastMainnetExitRoot)
        internal
        returns (ClaimPayload memory)
    {
        // make sure we are on Layer X
        assertEq(vm.activeFork(), forkIdLayerX);

        // simulate the Merkle trees on Layer X
        bytes32[] memory merkleTreeLayerX = new bytes32[](1);
        merkleTreeLayerX[0] = _ILxLyBridge(LXLY_BRIDGE_X).getLeafValue(
            _leaf.leafType,
            _leaf.originNetwork,
            _leaf.originAddress,
            _leaf.destinationNetwork,
            _leaf.destinationAddress,
            _leaf.amount,
            keccak256(abi.encodePacked(_leaf.metadata))
        );

        // layer X leaf index
        uint256 leafIndexLayerX = 0;

        // layer X Merkle tree root
        bytes32 merkleTreeRootLayerX = _getMerkleTreeRoot(_encodeLeaves(merkleTreeLayerX));

        // layer X proof
        bytes32[32] memory proofLayerX = _getProofByIndex(_encodeLeaves(merkleTreeLayerX), vm.toString(leafIndexLayerX));

        // simulate the Merkle tree on Layer Y
        bytes32[] memory merkleTreeLayerY = new bytes32[](1);
        merkleTreeLayerY[0] = merkleTreeRootLayerX;

        // layer Y leaf index
        uint256 leafIndexLayerY = 0;

        // layer Y Merkle tree root
        bytes32 merkleTreeRootLayerY = _getMerkleTreeRoot(_encodeLeaves(merkleTreeLayerY));

        // layer Y proof
        bytes32[32] memory proofLayerY = _getProofByIndex(_encodeLeaves(merkleTreeLayerY), vm.toString(leafIndexLayerY));

        return ClaimPayload({
            proofLayerX: proofLayerX,
            proofLayerY: proofLayerY,
            globalIndex: _computeGlobalIndex(leafIndexLayerX, leafIndexLayerY, false),
            exitRootLayerX: lastMainnetExitRoot,
            exitRootLayerY: merkleTreeRootLayerY,
            originNetwork: _leaf.originNetwork,
            originAddress: _leaf.originAddress,
            destinationNetwork: _leaf.destinationNetwork,
            destinationAddress: _leaf.destinationAddress,
            amount: _leaf.amount,
            metadata: _leaf.metadata
        });
    }

    function _getClaimPayloadsLayerY(LeafPayload[] memory _leaves, bytes32 lastMainnetExitRoot)
        internal
        returns (ClaimPayload[] memory)
    {
        // make sure we are on Layer Y
        assertEq(vm.activeFork(), forkIdLayerY);

        // simulate the Merkle trees on Layer Y
        bytes32[] memory merkleTreeLayerX = new bytes32[](_leaves.length);
        for (uint256 i = 0; i < _leaves.length; i++) {
            merkleTreeLayerX[i] = _ILxLyBridge(LXLY_BRIDGE_Y).getLeafValue(
                _leaves[i].leafType,
                _leaves[i].originNetwork,
                _leaves[i].originAddress,
                _leaves[i].destinationNetwork,
                _leaves[i].destinationAddress,
                _leaves[i].amount,
                keccak256(abi.encodePacked(_leaves[i].metadata))
            );
        }

        // layer X Merkle tree root
        bytes32 merkleTreeRootLayerX = _getMerkleTreeRoot(_encodeLeaves(merkleTreeLayerX));

        bytes32[] memory merkleTreeLayerY = new bytes32[](2);
        merkleTreeLayerY[0] = merkleTreeRootLayerX;
        merkleTreeLayerY[1] = merkleTreeRootLayerX;

        // layer Y Merkle tree root
        bytes32 merkleExitRootLayerY = _getMerkleTreeRoot(_encodeLeaves(merkleTreeLayerY));

        ClaimPayload[] memory claimPayloads = new ClaimPayload[](_leaves.length);
        for (uint256 i = 0; i < _leaves.length; i++) {
            LeafPayload memory leaf = _leaves[i];

            // layer X leaf index
            uint256 leafIndexLayerX = i;

            // proof for Layer X
            bytes32[32] memory proofLayerX =
                _getProofByIndex(_encodeLeaves(merkleTreeLayerX), vm.toString(leafIndexLayerX));

            // layer Y leaf index
            uint256 leafIndexLayerY = 1;

            // proof for Layer Y
            bytes32[32] memory proofLayerY =
                _getProofByIndex(_encodeLeaves(merkleTreeLayerY), vm.toString(leafIndexLayerY));

            claimPayloads[i] = ClaimPayload({
                proofLayerX: proofLayerX,
                proofLayerY: proofLayerY,
                globalIndex: _computeGlobalIndex(leafIndexLayerX, leafIndexLayerY, false),
                exitRootLayerX: lastMainnetExitRoot,
                exitRootLayerY: merkleExitRootLayerY,
                originNetwork: leaf.originNetwork,
                originAddress: leaf.originAddress,
                destinationNetwork: leaf.destinationNetwork,
                destinationAddress: leaf.destinationAddress,
                amount: leaf.amount,
                metadata: leaf.metadata
            });
        }

        return claimPayloads;
    }

    function _claimAndVerifyAssetLayerX(IERC20 _token, ClaimPayload memory _claimPayload) internal {
        // make sure we are on Layer X
        assertEq(vm.activeFork(), forkIdLayerX);

        // update Layer X exit root
        vm.prank(address(ROLLUP_MANAGER));
        IPolygonZkEVMGlobalExitRoot(GER_X).updateExitRoot(_claimPayload.exitRootLayerY);

        // claim asset on Layer X
        vm.expectEmit();
        emit ClaimEvent(
            _claimPayload.globalIndex,
            _claimPayload.originNetwork,
            _claimPayload.originAddress,
            _claimPayload.destinationAddress,
            _claimPayload.amount
        );
        ILxLyBridge(LXLY_BRIDGE_X).claimAsset(
            _claimPayload.proofLayerX,
            _claimPayload.proofLayerY,
            _claimPayload.globalIndex,
            _claimPayload.exitRootLayerX,
            _claimPayload.exitRootLayerY,
            _claimPayload.originNetwork,
            _claimPayload.originAddress,
            _claimPayload.destinationNetwork,
            _claimPayload.destinationAddress,
            _claimPayload.amount,
            _claimPayload.metadata
        );

        // assert balances
        assertEq(_token.balanceOf(_claimPayload.destinationAddress), _claimPayload.amount);
    }

    function _claimMessageLayerX(ClaimPayload memory _claimPayload) internal {
        // make sure we are on Layer X
        assertEq(vm.activeFork(), forkIdLayerX);

        // update Layer X exit root
        vm.prank(address(ROLLUP_MANAGER));
        IPolygonZkEVMGlobalExitRoot(GER_X).updateExitRoot(_claimPayload.exitRootLayerY);

        // claim asset on Layer X
        vm.expectEmit();
        emit ClaimEvent(
            _claimPayload.globalIndex,
            _claimPayload.originNetwork,
            _claimPayload.originAddress,
            _claimPayload.destinationAddress,
            _claimPayload.amount
        );
        ILxLyBridge(LXLY_BRIDGE_X).claimMessage(
            _claimPayload.proofLayerX,
            _claimPayload.proofLayerY,
            _claimPayload.globalIndex,
            _claimPayload.exitRootLayerX,
            _claimPayload.exitRootLayerY,
            _claimPayload.originNetwork,
            _claimPayload.originAddress,
            _claimPayload.destinationNetwork,
            _claimPayload.destinationAddress,
            _claimPayload.amount,
            _claimPayload.metadata
        );
    }

    function _claimAndVerifyAssetLayerY(IERC20 _token, ClaimPayload memory _claimPayload) internal {
        // make sure we are on Layer Y
        assertEq(vm.activeFork(), forkIdLayerY);

        // update Layer Y exit root
        vm.prank(address(LXLY_BRIDGE_Y));
        IPolygonZkEVMGlobalExitRoot(GER_Y).updateExitRoot(_claimPayload.exitRootLayerY);

        // insert Layer Y global exit root
        vm.prank(GER_Y_UPDATER);
        IPolygonZkEVMGlobalExitRoot(GER_Y).insertGlobalExitRoot(
            _calculateGlobalExitRoot(_claimPayload.exitRootLayerX, _claimPayload.exitRootLayerY)
        );

        // claim asset on Layer Y
        vm.expectEmit();
        emit ClaimEvent(
            _claimPayload.globalIndex,
            _claimPayload.originNetwork,
            _claimPayload.originAddress,
            _claimPayload.destinationAddress,
            _claimPayload.amount
        );
        ILxLyBridge(LXLY_BRIDGE_Y).claimAsset(
            _claimPayload.proofLayerX,
            _claimPayload.proofLayerY,
            _claimPayload.globalIndex,
            _claimPayload.exitRootLayerX,
            _claimPayload.exitRootLayerY,
            _claimPayload.originNetwork,
            _claimPayload.originAddress,
            _claimPayload.destinationNetwork,
            _claimPayload.destinationAddress,
            _claimPayload.amount,
            _claimPayload.metadata
        );

        // assert balances
        assertEq(_token.balanceOf(_claimPayload.destinationAddress), _claimPayload.amount);
    }

    function _claimAndRedeemLayerXAndVerify(ClaimPayload memory _claimPayload) internal {
        // make sure we are on Layer X
        assertEq(vm.activeFork(), forkIdLayerX);

        // update Layer X exit root
        vm.prank(address(ROLLUP_MANAGER));
        IPolygonZkEVMGlobalExitRoot(GER_X).updateExitRoot(_claimPayload.exitRootLayerY);

        // claim and withdraw on Layer X
        vm.prank(address(yeToken));
        yeToken.approve(recipient, _claimPayload.amount);

        vm.prank(recipient);
        yeToken.claimAndRedeem(
            _claimPayload.proofLayerX,
            _claimPayload.proofLayerY,
            _claimPayload.globalIndex,
            _claimPayload.exitRootLayerX,
            _claimPayload.exitRootLayerY,
            _claimPayload.destinationAddress,
            _claimPayload.amount,
            recipient,
            _claimPayload.metadata
        );

        assertEq(yeToken.underlyingToken().balanceOf(recipient), _claimPayload.amount);
    }

    function _deconvertAndBridgeLayerY(address _sender, uint256 _amount, LeafPayload memory _leaf) internal {
        // make sure we are on Layer Y
        assertEq(vm.activeFork(), forkIdLayerY);

        vm.startPrank(_sender);

        // approve the custom token
        nativeConverter.customToken().approve(address(nativeConverter), _amount);

        // deconvert and bridge
        vm.expectEmit();
        emit BridgeEvent(
            _leaf.leafType,
            _leaf.originNetwork,
            _leaf.originAddress,
            _leaf.destinationNetwork,
            _leaf.destinationAddress,
            _leaf.amount,
            _leaf.metadata,
            _ILxLyBridge(LXLY_BRIDGE_Y).depositCount()
        );

        nativeConverter.deconvertAndBridge(_amount, _leaf.destinationAddress, _leaf.destinationNetwork, true);

        vm.stopPrank();

        // assert balances
        vm.assertEq(nativeConverter.customToken().balanceOf(_sender), 0);
        vm.assertEq(nativeConverter.underlyingToken().balanceOf(LXLY_BRIDGE_Y), 0);
    }

    function _proxify(address logic, address admin, bytes memory initData) internal returns (address proxy) {
        proxy = address(new TransparentUpgradeableProxy(logic, admin, initData));
    }

    function _computeGlobalIndex(uint256 indexLayerX, uint256 indexLayerY, bool isLayerX)
        internal
        pure
        returns (uint256)
    {
        if (isLayerX) {
            return indexLayerX + 2 ** 64;
        } else {
            return indexLayerX + indexLayerY * 2 ** 32;
        }
    }

    function _calculateGlobalExitRoot(bytes32 exitRootLayerX, bytes32 exitRootLayerY) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(exitRootLayerX, exitRootLayerY));
    }
}
